import { DestroyRef, Injector, NgZone, computed, effect, inject, runInInjectionContext, signal, untracked, } from '@angular/core';
import { notifyManager } from '@tanstack/query-core';
import { signalProxy } from './signal-proxy';
import { shouldThrowError } from './util';
import { lazyInit } from './util/lazy-init/lazy-init';
import { injectQueryClient } from './inject-query-client';
/**
 * Base implementation for `injectQuery` and `injectInfiniteQuery`.
 */
export function createBaseQuery(optionsFn, Observer) {
    const injector = inject(Injector);
    return lazyInit(() => {
        const ngZone = injector.get(NgZone);
        const destroyRef = injector.get(DestroyRef);
        const queryClient = injectQueryClient({ injector });
        /**
         * Signal that has the default options from query client applied
         * computed() is used so signals can be inserted into the options
         * making it reactive. Wrapping options in a function ensures embedded expressions
         * are preserved and can keep being applied after signal changes
         */
        const defaultedOptionsSignal = computed(() => {
            const options = runInInjectionContext(injector, () => optionsFn(queryClient));
            const defaultedOptions = queryClient.defaultQueryOptions(options);
            defaultedOptions._optimisticResults = 'optimistic';
            return defaultedOptions;
        });
        const observer = new Observer(queryClient, defaultedOptionsSignal());
        const resultSignal = signal(observer.getOptimisticResult(defaultedOptionsSignal()));
        effect(() => {
            const defaultedOptions = defaultedOptionsSignal();
            observer.setOptions(defaultedOptions, {
                // Do not notify on updates because of changes in the options because
                // these changes should already be reflected in the optimistic result.
                listeners: false,
            });
            untracked(() => {
                resultSignal.set(observer.getOptimisticResult(defaultedOptions));
            });
        }, {
            injector,
        });
        // observer.trackResult is not used as this optimization is not needed for Angular
        const unsubscribe = observer.subscribe(notifyManager.batchCalls((state) => {
            ngZone.run(() => {
                if (state.isError &&
                    !state.isFetching &&
                    // !isRestoring() && // todo: enable when client persistence is implemented
                    shouldThrowError(observer.options.throwOnError, [
                        state.error,
                        observer.getCurrentQuery(),
                    ])) {
                    throw state.error;
                }
                resultSignal.set(state);
            });
        }));
        destroyRef.onDestroy(unsubscribe);
        return signalProxy(resultSignal);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWJhc2UtcXVlcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY3JlYXRlLWJhc2UtcXVlcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFVBQVUsRUFDVixRQUFRLEVBQ1IsTUFBTSxFQUNOLFFBQVEsRUFDUixNQUFNLEVBQ04sTUFBTSxFQUNOLHFCQUFxQixFQUNyQixNQUFNLEVBQ04sU0FBUyxHQUNWLE1BQU0sZUFBZSxDQUFBO0FBQ3RCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUNwRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFDNUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sUUFBUSxDQUFBO0FBQ3pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQUNyRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQTtBQVN6RDs7R0FFRztBQUNILE1BQU0sVUFBVSxlQUFlLENBTzdCLFNBUUMsRUFDRCxRQUE4QjtJQUU5QixNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDakMsT0FBTyxRQUFRLENBQUMsR0FBRyxFQUFFO1FBQ25CLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDbkMsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUMzQyxNQUFNLFdBQVcsR0FBRyxpQkFBaUIsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUE7UUFFbkQ7Ozs7O1dBS0c7UUFDSCxNQUFNLHNCQUFzQixHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUU7WUFDM0MsTUFBTSxPQUFPLEdBQUcscUJBQXFCLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUNuRCxTQUFTLENBQUMsV0FBVyxDQUFDLENBQ3ZCLENBQUE7WUFDRCxNQUFNLGdCQUFnQixHQUFHLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUNqRSxnQkFBZ0IsQ0FBQyxrQkFBa0IsR0FBRyxZQUFZLENBQUE7WUFDbEQsT0FBTyxnQkFBZ0IsQ0FBQTtRQUN6QixDQUFDLENBQUMsQ0FBQTtRQUVGLE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxDQU0zQixXQUFXLEVBQUUsc0JBQXNCLEVBQUUsQ0FBQyxDQUFBO1FBRXhDLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FDekIsUUFBUSxDQUFDLG1CQUFtQixDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FDdkQsQ0FBQTtRQUVELE1BQU0sQ0FDSixHQUFHLEVBQUU7WUFDSCxNQUFNLGdCQUFnQixHQUFHLHNCQUFzQixFQUFFLENBQUE7WUFDakQsUUFBUSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRTtnQkFDcEMscUVBQXFFO2dCQUNyRSxzRUFBc0U7Z0JBQ3RFLFNBQVMsRUFBRSxLQUFLO2FBQ2pCLENBQUMsQ0FBQTtZQUNGLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2IsWUFBWSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFBO1lBQ2xFLENBQUMsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxFQUNEO1lBQ0UsUUFBUTtTQUNULENBQ0YsQ0FBQTtRQUVELGtGQUFrRjtRQUNsRixNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUNwQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBeUMsRUFBRSxFQUFFO1lBQ3JFLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO2dCQUNkLElBQ0UsS0FBSyxDQUFDLE9BQU87b0JBQ2IsQ0FBQyxLQUFLLENBQUMsVUFBVTtvQkFDakIsMkVBQTJFO29CQUMzRSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRTt3QkFDOUMsS0FBSyxDQUFDLEtBQUs7d0JBQ1gsUUFBUSxDQUFDLGVBQWUsRUFBRTtxQkFDM0IsQ0FBQyxFQUNGLENBQUM7b0JBQ0QsTUFBTSxLQUFLLENBQUMsS0FBSyxDQUFBO2dCQUNuQixDQUFDO2dCQUNELFlBQVksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDekIsQ0FBQyxDQUFDLENBQUE7UUFDSixDQUFDLENBQUMsQ0FDSCxDQUFBO1FBQ0QsVUFBVSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUVqQyxPQUFPLFdBQVcsQ0FBQyxZQUFZLENBQXlDLENBQUE7SUFDMUUsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGVzdHJveVJlZixcbiAgSW5qZWN0b3IsXG4gIE5nWm9uZSxcbiAgY29tcHV0ZWQsXG4gIGVmZmVjdCxcbiAgaW5qZWN0LFxuICBydW5JbkluamVjdGlvbkNvbnRleHQsXG4gIHNpZ25hbCxcbiAgdW50cmFja2VkLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJ1xuaW1wb3J0IHsgbm90aWZ5TWFuYWdlciB9IGZyb20gJ0B0YW5zdGFjay9xdWVyeS1jb3JlJ1xuaW1wb3J0IHsgc2lnbmFsUHJveHkgfSBmcm9tICcuL3NpZ25hbC1wcm94eSdcbmltcG9ydCB7IHNob3VsZFRocm93RXJyb3IgfSBmcm9tICcuL3V0aWwnXG5pbXBvcnQgeyBsYXp5SW5pdCB9IGZyb20gJy4vdXRpbC9sYXp5LWluaXQvbGF6eS1pbml0J1xuaW1wb3J0IHsgaW5qZWN0UXVlcnlDbGllbnQgfSBmcm9tICcuL2luamVjdC1xdWVyeS1jbGllbnQnXG5pbXBvcnQgdHlwZSB7XG4gIFF1ZXJ5Q2xpZW50LFxuICBRdWVyeUtleSxcbiAgUXVlcnlPYnNlcnZlcixcbiAgUXVlcnlPYnNlcnZlclJlc3VsdCxcbn0gZnJvbSAnQHRhbnN0YWNrL3F1ZXJ5LWNvcmUnXG5pbXBvcnQgdHlwZSB7IENyZWF0ZUJhc2VRdWVyeU9wdGlvbnMsIENyZWF0ZUJhc2VRdWVyeVJlc3VsdCB9IGZyb20gJy4vdHlwZXMnXG5cbi8qKlxuICogQmFzZSBpbXBsZW1lbnRhdGlvbiBmb3IgYGluamVjdFF1ZXJ5YCBhbmQgYGluamVjdEluZmluaXRlUXVlcnlgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQmFzZVF1ZXJ5PFxuICBUUXVlcnlGbkRhdGEsXG4gIFRFcnJvcixcbiAgVERhdGEsXG4gIFRRdWVyeURhdGEsXG4gIFRRdWVyeUtleSBleHRlbmRzIFF1ZXJ5S2V5LFxuPihcbiAgb3B0aW9uc0ZuOiAoXG4gICAgY2xpZW50OiBRdWVyeUNsaWVudCxcbiAgKSA9PiBDcmVhdGVCYXNlUXVlcnlPcHRpb25zPFxuICAgIFRRdWVyeUZuRGF0YSxcbiAgICBURXJyb3IsXG4gICAgVERhdGEsXG4gICAgVFF1ZXJ5RGF0YSxcbiAgICBUUXVlcnlLZXlcbiAgPixcbiAgT2JzZXJ2ZXI6IHR5cGVvZiBRdWVyeU9ic2VydmVyLFxuKTogQ3JlYXRlQmFzZVF1ZXJ5UmVzdWx0PFREYXRhLCBURXJyb3I+IHtcbiAgY29uc3QgaW5qZWN0b3IgPSBpbmplY3QoSW5qZWN0b3IpXG4gIHJldHVybiBsYXp5SW5pdCgoKSA9PiB7XG4gICAgY29uc3Qgbmdab25lID0gaW5qZWN0b3IuZ2V0KE5nWm9uZSlcbiAgICBjb25zdCBkZXN0cm95UmVmID0gaW5qZWN0b3IuZ2V0KERlc3Ryb3lSZWYpXG4gICAgY29uc3QgcXVlcnlDbGllbnQgPSBpbmplY3RRdWVyeUNsaWVudCh7IGluamVjdG9yIH0pXG5cbiAgICAvKipcbiAgICAgKiBTaWduYWwgdGhhdCBoYXMgdGhlIGRlZmF1bHQgb3B0aW9ucyBmcm9tIHF1ZXJ5IGNsaWVudCBhcHBsaWVkXG4gICAgICogY29tcHV0ZWQoKSBpcyB1c2VkIHNvIHNpZ25hbHMgY2FuIGJlIGluc2VydGVkIGludG8gdGhlIG9wdGlvbnNcbiAgICAgKiBtYWtpbmcgaXQgcmVhY3RpdmUuIFdyYXBwaW5nIG9wdGlvbnMgaW4gYSBmdW5jdGlvbiBlbnN1cmVzIGVtYmVkZGVkIGV4cHJlc3Npb25zXG4gICAgICogYXJlIHByZXNlcnZlZCBhbmQgY2FuIGtlZXAgYmVpbmcgYXBwbGllZCBhZnRlciBzaWduYWwgY2hhbmdlc1xuICAgICAqL1xuICAgIGNvbnN0IGRlZmF1bHRlZE9wdGlvbnNTaWduYWwgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBvcHRpb25zID0gcnVuSW5JbmplY3Rpb25Db250ZXh0KGluamVjdG9yLCAoKSA9PlxuICAgICAgICBvcHRpb25zRm4ocXVlcnlDbGllbnQpLFxuICAgICAgKVxuICAgICAgY29uc3QgZGVmYXVsdGVkT3B0aW9ucyA9IHF1ZXJ5Q2xpZW50LmRlZmF1bHRRdWVyeU9wdGlvbnMob3B0aW9ucylcbiAgICAgIGRlZmF1bHRlZE9wdGlvbnMuX29wdGltaXN0aWNSZXN1bHRzID0gJ29wdGltaXN0aWMnXG4gICAgICByZXR1cm4gZGVmYXVsdGVkT3B0aW9uc1xuICAgIH0pXG5cbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBPYnNlcnZlcjxcbiAgICAgIFRRdWVyeUZuRGF0YSxcbiAgICAgIFRFcnJvcixcbiAgICAgIFREYXRhLFxuICAgICAgVFF1ZXJ5RGF0YSxcbiAgICAgIFRRdWVyeUtleVxuICAgID4ocXVlcnlDbGllbnQsIGRlZmF1bHRlZE9wdGlvbnNTaWduYWwoKSlcblxuICAgIGNvbnN0IHJlc3VsdFNpZ25hbCA9IHNpZ25hbChcbiAgICAgIG9ic2VydmVyLmdldE9wdGltaXN0aWNSZXN1bHQoZGVmYXVsdGVkT3B0aW9uc1NpZ25hbCgpKSxcbiAgICApXG5cbiAgICBlZmZlY3QoXG4gICAgICAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRlZE9wdGlvbnMgPSBkZWZhdWx0ZWRPcHRpb25zU2lnbmFsKClcbiAgICAgICAgb2JzZXJ2ZXIuc2V0T3B0aW9ucyhkZWZhdWx0ZWRPcHRpb25zLCB7XG4gICAgICAgICAgLy8gRG8gbm90IG5vdGlmeSBvbiB1cGRhdGVzIGJlY2F1c2Ugb2YgY2hhbmdlcyBpbiB0aGUgb3B0aW9ucyBiZWNhdXNlXG4gICAgICAgICAgLy8gdGhlc2UgY2hhbmdlcyBzaG91bGQgYWxyZWFkeSBiZSByZWZsZWN0ZWQgaW4gdGhlIG9wdGltaXN0aWMgcmVzdWx0LlxuICAgICAgICAgIGxpc3RlbmVyczogZmFsc2UsXG4gICAgICAgIH0pXG4gICAgICAgIHVudHJhY2tlZCgoKSA9PiB7XG4gICAgICAgICAgcmVzdWx0U2lnbmFsLnNldChvYnNlcnZlci5nZXRPcHRpbWlzdGljUmVzdWx0KGRlZmF1bHRlZE9wdGlvbnMpKVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5qZWN0b3IsXG4gICAgICB9LFxuICAgIClcblxuICAgIC8vIG9ic2VydmVyLnRyYWNrUmVzdWx0IGlzIG5vdCB1c2VkIGFzIHRoaXMgb3B0aW1pemF0aW9uIGlzIG5vdCBuZWVkZWQgZm9yIEFuZ3VsYXJcbiAgICBjb25zdCB1bnN1YnNjcmliZSA9IG9ic2VydmVyLnN1YnNjcmliZShcbiAgICAgIG5vdGlmeU1hbmFnZXIuYmF0Y2hDYWxscygoc3RhdGU6IFF1ZXJ5T2JzZXJ2ZXJSZXN1bHQ8VERhdGEsIFRFcnJvcj4pID0+IHtcbiAgICAgICAgbmdab25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgc3RhdGUuaXNFcnJvciAmJlxuICAgICAgICAgICAgIXN0YXRlLmlzRmV0Y2hpbmcgJiZcbiAgICAgICAgICAgIC8vICFpc1Jlc3RvcmluZygpICYmIC8vIHRvZG86IGVuYWJsZSB3aGVuIGNsaWVudCBwZXJzaXN0ZW5jZSBpcyBpbXBsZW1lbnRlZFxuICAgICAgICAgICAgc2hvdWxkVGhyb3dFcnJvcihvYnNlcnZlci5vcHRpb25zLnRocm93T25FcnJvciwgW1xuICAgICAgICAgICAgICBzdGF0ZS5lcnJvcixcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIuZ2V0Q3VycmVudFF1ZXJ5KCksXG4gICAgICAgICAgICBdKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhyb3cgc3RhdGUuZXJyb3JcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0U2lnbmFsLnNldChzdGF0ZSlcbiAgICAgICAgfSlcbiAgICAgIH0pLFxuICAgIClcbiAgICBkZXN0cm95UmVmLm9uRGVzdHJveSh1bnN1YnNjcmliZSlcblxuICAgIHJldHVybiBzaWduYWxQcm94eShyZXN1bHRTaWduYWwpIGFzIENyZWF0ZUJhc2VRdWVyeVJlc3VsdDxURGF0YSwgVEVycm9yPlxuICB9KVxufVxuIl19