/**
 * Allows to share and re-use infinite query options in a type-safe way.
 *
 * The `queryKey` will be tagged with the type from `queryFn`.
 * @param options - The infinite query options to tag with the type from `queryFn`.
 * @returns The tagged infinite query options.
 * @public
 */
export function infiniteQueryOptions(options) {
    return options;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5maW5pdGUtcXVlcnktb3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmZpbml0ZS1xdWVyeS1vcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtIQTs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFVLG9CQUFvQixDQUFDLE9BQWdCO0lBQ25ELE9BQU8sT0FBTyxDQUFBO0FBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7XG4gIERhdGFUYWcsXG4gIERlZmF1bHRFcnJvcixcbiAgSW5maW5pdGVEYXRhLFxuICBRdWVyeUtleSxcbn0gZnJvbSAnQHRhbnN0YWNrL3F1ZXJ5LWNvcmUnXG5pbXBvcnQgdHlwZSB7IENyZWF0ZUluZmluaXRlUXVlcnlPcHRpb25zLCBOb25VbmRlZmluZWRHdWFyZCB9IGZyb20gJy4vdHlwZXMnXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBVbmRlZmluZWRJbml0aWFsRGF0YUluZmluaXRlT3B0aW9uczxcbiAgVFF1ZXJ5Rm5EYXRhLFxuICBURXJyb3IgPSBEZWZhdWx0RXJyb3IsXG4gIFREYXRhID0gSW5maW5pdGVEYXRhPFRRdWVyeUZuRGF0YT4sXG4gIFRRdWVyeUtleSBleHRlbmRzIFF1ZXJ5S2V5ID0gUXVlcnlLZXksXG4gIFRQYWdlUGFyYW0gPSB1bmtub3duLFxuPiA9IENyZWF0ZUluZmluaXRlUXVlcnlPcHRpb25zPFxuICBUUXVlcnlGbkRhdGEsXG4gIFRFcnJvcixcbiAgVERhdGEsXG4gIFRRdWVyeUZuRGF0YSxcbiAgVFF1ZXJ5S2V5LFxuICBUUGFnZVBhcmFtXG4+ICYge1xuICBpbml0aWFsRGF0YT86IHVuZGVmaW5lZFxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgRGVmaW5lZEluaXRpYWxEYXRhSW5maW5pdGVPcHRpb25zPFxuICBUUXVlcnlGbkRhdGEsXG4gIFRFcnJvciA9IERlZmF1bHRFcnJvcixcbiAgVERhdGEgPSBJbmZpbml0ZURhdGE8VFF1ZXJ5Rm5EYXRhPixcbiAgVFF1ZXJ5S2V5IGV4dGVuZHMgUXVlcnlLZXkgPSBRdWVyeUtleSxcbiAgVFBhZ2VQYXJhbSA9IHVua25vd24sXG4+ID0gQ3JlYXRlSW5maW5pdGVRdWVyeU9wdGlvbnM8XG4gIFRRdWVyeUZuRGF0YSxcbiAgVEVycm9yLFxuICBURGF0YSxcbiAgVFF1ZXJ5Rm5EYXRhLFxuICBUUXVlcnlLZXksXG4gIFRQYWdlUGFyYW1cbj4gJiB7XG4gIGluaXRpYWxEYXRhOlxuICAgIHwgTm9uVW5kZWZpbmVkR3VhcmQ8SW5maW5pdGVEYXRhPFRRdWVyeUZuRGF0YSwgVFBhZ2VQYXJhbT4+XG4gICAgfCAoKCkgPT4gTm9uVW5kZWZpbmVkR3VhcmQ8SW5maW5pdGVEYXRhPFRRdWVyeUZuRGF0YSwgVFBhZ2VQYXJhbT4+KVxufVxuXG4vKipcbiAqIEFsbG93cyB0byBzaGFyZSBhbmQgcmUtdXNlIGluZmluaXRlIHF1ZXJ5IG9wdGlvbnMgaW4gYSB0eXBlLXNhZmUgd2F5LlxuICpcbiAqIFRoZSBgcXVlcnlLZXlgIHdpbGwgYmUgdGFnZ2VkIHdpdGggdGhlIHR5cGUgZnJvbSBgcXVlcnlGbmAuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBpbmZpbml0ZSBxdWVyeSBvcHRpb25zIHRvIHRhZyB3aXRoIHRoZSB0eXBlIGZyb20gYHF1ZXJ5Rm5gLlxuICogQHJldHVybnMgVGhlIHRhZ2dlZCBpbmZpbml0ZSBxdWVyeSBvcHRpb25zLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gaW5maW5pdGVRdWVyeU9wdGlvbnM8XG4gIFRRdWVyeUZuRGF0YSxcbiAgVEVycm9yID0gRGVmYXVsdEVycm9yLFxuICBURGF0YSA9IEluZmluaXRlRGF0YTxUUXVlcnlGbkRhdGE+LFxuICBUUXVlcnlLZXkgZXh0ZW5kcyBRdWVyeUtleSA9IFF1ZXJ5S2V5LFxuICBUUGFnZVBhcmFtID0gdW5rbm93bixcbj4oXG4gIG9wdGlvbnM6IERlZmluZWRJbml0aWFsRGF0YUluZmluaXRlT3B0aW9uczxcbiAgICBUUXVlcnlGbkRhdGEsXG4gICAgVEVycm9yLFxuICAgIFREYXRhLFxuICAgIFRRdWVyeUtleSxcbiAgICBUUGFnZVBhcmFtXG4gID4sXG4pOiBEZWZpbmVkSW5pdGlhbERhdGFJbmZpbml0ZU9wdGlvbnM8XG4gIFRRdWVyeUZuRGF0YSxcbiAgVEVycm9yLFxuICBURGF0YSxcbiAgVFF1ZXJ5S2V5LFxuICBUUGFnZVBhcmFtXG4+ICYge1xuICBxdWVyeUtleTogRGF0YVRhZzxUUXVlcnlLZXksIEluZmluaXRlRGF0YTxUUXVlcnlGbkRhdGE+PlxufVxuXG4vKipcbiAqIEFsbG93cyB0byBzaGFyZSBhbmQgcmUtdXNlIGluZmluaXRlIHF1ZXJ5IG9wdGlvbnMgaW4gYSB0eXBlLXNhZmUgd2F5LlxuICpcbiAqIFRoZSBgcXVlcnlLZXlgIHdpbGwgYmUgdGFnZ2VkIHdpdGggdGhlIHR5cGUgZnJvbSBgcXVlcnlGbmAuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBpbmZpbml0ZSBxdWVyeSBvcHRpb25zIHRvIHRhZyB3aXRoIHRoZSB0eXBlIGZyb20gYHF1ZXJ5Rm5gLlxuICogQHJldHVybnMgVGhlIHRhZ2dlZCBpbmZpbml0ZSBxdWVyeSBvcHRpb25zLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gaW5maW5pdGVRdWVyeU9wdGlvbnM8XG4gIFRRdWVyeUZuRGF0YSxcbiAgVEVycm9yID0gRGVmYXVsdEVycm9yLFxuICBURGF0YSA9IEluZmluaXRlRGF0YTxUUXVlcnlGbkRhdGE+LFxuICBUUXVlcnlLZXkgZXh0ZW5kcyBRdWVyeUtleSA9IFF1ZXJ5S2V5LFxuICBUUGFnZVBhcmFtID0gdW5rbm93bixcbj4oXG4gIG9wdGlvbnM6IFVuZGVmaW5lZEluaXRpYWxEYXRhSW5maW5pdGVPcHRpb25zPFxuICAgIFRRdWVyeUZuRGF0YSxcbiAgICBURXJyb3IsXG4gICAgVERhdGEsXG4gICAgVFF1ZXJ5S2V5LFxuICAgIFRQYWdlUGFyYW1cbiAgPixcbik6IFVuZGVmaW5lZEluaXRpYWxEYXRhSW5maW5pdGVPcHRpb25zPFxuICBUUXVlcnlGbkRhdGEsXG4gIFRFcnJvcixcbiAgVERhdGEsXG4gIFRRdWVyeUtleSxcbiAgVFBhZ2VQYXJhbVxuPiAmIHtcbiAgcXVlcnlLZXk6IERhdGFUYWc8VFF1ZXJ5S2V5LCBJbmZpbml0ZURhdGE8VFF1ZXJ5Rm5EYXRhPj5cbn1cblxuLyoqXG4gKiBBbGxvd3MgdG8gc2hhcmUgYW5kIHJlLXVzZSBpbmZpbml0ZSBxdWVyeSBvcHRpb25zIGluIGEgdHlwZS1zYWZlIHdheS5cbiAqXG4gKiBUaGUgYHF1ZXJ5S2V5YCB3aWxsIGJlIHRhZ2dlZCB3aXRoIHRoZSB0eXBlIGZyb20gYHF1ZXJ5Rm5gLlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgaW5maW5pdGUgcXVlcnkgb3B0aW9ucyB0byB0YWcgd2l0aCB0aGUgdHlwZSBmcm9tIGBxdWVyeUZuYC5cbiAqIEByZXR1cm5zIFRoZSB0YWdnZWQgaW5maW5pdGUgcXVlcnkgb3B0aW9ucy5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluZmluaXRlUXVlcnlPcHRpb25zKG9wdGlvbnM6IHVua25vd24pIHtcbiAgcmV0dXJuIG9wdGlvbnNcbn1cbiJdfQ==