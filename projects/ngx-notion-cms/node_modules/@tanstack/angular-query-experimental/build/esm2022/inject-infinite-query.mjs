import { InfiniteQueryObserver } from '@tanstack/query-core';
import { createBaseQuery } from './create-base-query';
import { assertInjector } from './util/assert-injector/assert-injector';
/**
 * Injects an infinite query: a declarative dependency on an asynchronous source of data that is tied to a unique key.
 * Infinite queries can additively "load more" data onto an existing set of data or "infinite scroll"
 * @param optionsFn - A function that returns infinite query options.
 * @param injector - The Angular injector to use.
 * @returns The infinite query result.
 * @public
 */
export function injectInfiniteQuery(optionsFn, injector) {
    return assertInjector(injectInfiniteQuery, injector, () => createBaseQuery(optionsFn, InfiniteQueryObserver));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0LWluZmluaXRlLXF1ZXJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2luamVjdC1pbmZpbml0ZS1xdWVyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUM1RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFDckQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdDQUF3QyxDQUFBO0FBcUd2RTs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFVLG1CQUFtQixDQUNqQyxTQUE4RCxFQUM5RCxRQUFtQjtJQUVuQixPQUFPLGNBQWMsQ0FBQyxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQ3hELGVBQWUsQ0FBQyxTQUFTLEVBQUUscUJBQTZDLENBQUMsQ0FDMUUsQ0FBQTtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmZpbml0ZVF1ZXJ5T2JzZXJ2ZXIgfSBmcm9tICdAdGFuc3RhY2svcXVlcnktY29yZSdcbmltcG9ydCB7IGNyZWF0ZUJhc2VRdWVyeSB9IGZyb20gJy4vY3JlYXRlLWJhc2UtcXVlcnknXG5pbXBvcnQgeyBhc3NlcnRJbmplY3RvciB9IGZyb20gJy4vdXRpbC9hc3NlcnQtaW5qZWN0b3IvYXNzZXJ0LWluamVjdG9yJ1xuaW1wb3J0IHR5cGUgeyBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXG5pbXBvcnQgdHlwZSB7XG4gIERlZmF1bHRFcnJvcixcbiAgSW5maW5pdGVEYXRhLFxuICBRdWVyeUNsaWVudCxcbiAgUXVlcnlLZXksXG4gIFF1ZXJ5T2JzZXJ2ZXIsXG59IGZyb20gJ0B0YW5zdGFjay9xdWVyeS1jb3JlJ1xuaW1wb3J0IHR5cGUge1xuICBDcmVhdGVJbmZpbml0ZVF1ZXJ5T3B0aW9ucyxcbiAgQ3JlYXRlSW5maW5pdGVRdWVyeVJlc3VsdCxcbiAgRGVmaW5lZENyZWF0ZUluZmluaXRlUXVlcnlSZXN1bHQsXG59IGZyb20gJy4vdHlwZXMnXG5pbXBvcnQgdHlwZSB7XG4gIERlZmluZWRJbml0aWFsRGF0YUluZmluaXRlT3B0aW9ucyxcbiAgVW5kZWZpbmVkSW5pdGlhbERhdGFJbmZpbml0ZU9wdGlvbnMsXG59IGZyb20gJy4vaW5maW5pdGUtcXVlcnktb3B0aW9ucydcblxuLyoqXG4gKiBJbmplY3RzIGFuIGluZmluaXRlIHF1ZXJ5OiBhIGRlY2xhcmF0aXZlIGRlcGVuZGVuY3kgb24gYW4gYXN5bmNocm9ub3VzIHNvdXJjZSBvZiBkYXRhIHRoYXQgaXMgdGllZCB0byBhIHVuaXF1ZSBrZXkuXG4gKiBJbmZpbml0ZSBxdWVyaWVzIGNhbiBhZGRpdGl2ZWx5IFwibG9hZCBtb3JlXCIgZGF0YSBvbnRvIGFuIGV4aXN0aW5nIHNldCBvZiBkYXRhIG9yIFwiaW5maW5pdGUgc2Nyb2xsXCJcbiAqIEBwYXJhbSBvcHRpb25zRm4gLSBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBpbmZpbml0ZSBxdWVyeSBvcHRpb25zLlxuICogQHBhcmFtIGluamVjdG9yIC0gVGhlIEFuZ3VsYXIgaW5qZWN0b3IgdG8gdXNlLlxuICogQHJldHVybnMgVGhlIGluZmluaXRlIHF1ZXJ5IHJlc3VsdC5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluamVjdEluZmluaXRlUXVlcnk8XG4gIFRRdWVyeUZuRGF0YSxcbiAgVEVycm9yID0gRGVmYXVsdEVycm9yLFxuICBURGF0YSA9IEluZmluaXRlRGF0YTxUUXVlcnlGbkRhdGE+LFxuICBUUXVlcnlLZXkgZXh0ZW5kcyBRdWVyeUtleSA9IFF1ZXJ5S2V5LFxuICBUUGFnZVBhcmFtID0gdW5rbm93bixcbj4oXG4gIG9wdGlvbnNGbjogKFxuICAgIGNsaWVudDogUXVlcnlDbGllbnQsXG4gICkgPT4gRGVmaW5lZEluaXRpYWxEYXRhSW5maW5pdGVPcHRpb25zPFxuICAgIFRRdWVyeUZuRGF0YSxcbiAgICBURXJyb3IsXG4gICAgVERhdGEsXG4gICAgVFF1ZXJ5S2V5LFxuICAgIFRQYWdlUGFyYW1cbiAgPixcbiAgaW5qZWN0b3I/OiBJbmplY3Rvcixcbik6IERlZmluZWRDcmVhdGVJbmZpbml0ZVF1ZXJ5UmVzdWx0PFREYXRhLCBURXJyb3I+XG5cbi8qKlxuICogSW5qZWN0cyBhbiBpbmZpbml0ZSBxdWVyeTogYSBkZWNsYXJhdGl2ZSBkZXBlbmRlbmN5IG9uIGFuIGFzeW5jaHJvbm91cyBzb3VyY2Ugb2YgZGF0YSB0aGF0IGlzIHRpZWQgdG8gYSB1bmlxdWUga2V5LlxuICogSW5maW5pdGUgcXVlcmllcyBjYW4gYWRkaXRpdmVseSBcImxvYWQgbW9yZVwiIGRhdGEgb250byBhbiBleGlzdGluZyBzZXQgb2YgZGF0YSBvciBcImluZmluaXRlIHNjcm9sbFwiXG4gKiBAcGFyYW0gb3B0aW9uc0ZuIC0gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgaW5maW5pdGUgcXVlcnkgb3B0aW9ucy5cbiAqIEBwYXJhbSBpbmplY3RvciAtIFRoZSBBbmd1bGFyIGluamVjdG9yIHRvIHVzZS5cbiAqIEByZXR1cm5zIFRoZSBpbmZpbml0ZSBxdWVyeSByZXN1bHQuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbmplY3RJbmZpbml0ZVF1ZXJ5PFxuICBUUXVlcnlGbkRhdGEsXG4gIFRFcnJvciA9IERlZmF1bHRFcnJvcixcbiAgVERhdGEgPSBJbmZpbml0ZURhdGE8VFF1ZXJ5Rm5EYXRhPixcbiAgVFF1ZXJ5S2V5IGV4dGVuZHMgUXVlcnlLZXkgPSBRdWVyeUtleSxcbiAgVFBhZ2VQYXJhbSA9IHVua25vd24sXG4+KFxuICBvcHRpb25zRm46IChcbiAgICBjbGllbnQ6IFF1ZXJ5Q2xpZW50LFxuICApID0+IFVuZGVmaW5lZEluaXRpYWxEYXRhSW5maW5pdGVPcHRpb25zPFxuICAgIFRRdWVyeUZuRGF0YSxcbiAgICBURXJyb3IsXG4gICAgVERhdGEsXG4gICAgVFF1ZXJ5S2V5LFxuICAgIFRQYWdlUGFyYW1cbiAgPixcbiAgaW5qZWN0b3I/OiBJbmplY3Rvcixcbik6IENyZWF0ZUluZmluaXRlUXVlcnlSZXN1bHQ8VERhdGEsIFRFcnJvcj5cblxuLyoqXG4gKiBJbmplY3RzIGFuIGluZmluaXRlIHF1ZXJ5OiBhIGRlY2xhcmF0aXZlIGRlcGVuZGVuY3kgb24gYW4gYXN5bmNocm9ub3VzIHNvdXJjZSBvZiBkYXRhIHRoYXQgaXMgdGllZCB0byBhIHVuaXF1ZSBrZXkuXG4gKiBJbmZpbml0ZSBxdWVyaWVzIGNhbiBhZGRpdGl2ZWx5IFwibG9hZCBtb3JlXCIgZGF0YSBvbnRvIGFuIGV4aXN0aW5nIHNldCBvZiBkYXRhIG9yIFwiaW5maW5pdGUgc2Nyb2xsXCJcbiAqIEBwYXJhbSBvcHRpb25zRm4gLSBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBpbmZpbml0ZSBxdWVyeSBvcHRpb25zLlxuICogQHBhcmFtIGluamVjdG9yIC0gVGhlIEFuZ3VsYXIgaW5qZWN0b3IgdG8gdXNlLlxuICogQHJldHVybnMgVGhlIGluZmluaXRlIHF1ZXJ5IHJlc3VsdC5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluamVjdEluZmluaXRlUXVlcnk8XG4gIFRRdWVyeUZuRGF0YSxcbiAgVEVycm9yID0gRGVmYXVsdEVycm9yLFxuICBURGF0YSA9IEluZmluaXRlRGF0YTxUUXVlcnlGbkRhdGE+LFxuICBUUXVlcnlLZXkgZXh0ZW5kcyBRdWVyeUtleSA9IFF1ZXJ5S2V5LFxuICBUUGFnZVBhcmFtID0gdW5rbm93bixcbj4oXG4gIG9wdGlvbnNGbjogKFxuICAgIGNsaWVudDogUXVlcnlDbGllbnQsXG4gICkgPT4gQ3JlYXRlSW5maW5pdGVRdWVyeU9wdGlvbnM8XG4gICAgVFF1ZXJ5Rm5EYXRhLFxuICAgIFRFcnJvcixcbiAgICBURGF0YSxcbiAgICBUUXVlcnlGbkRhdGEsXG4gICAgVFF1ZXJ5S2V5LFxuICAgIFRQYWdlUGFyYW1cbiAgPixcbiAgaW5qZWN0b3I/OiBJbmplY3Rvcixcbik6IENyZWF0ZUluZmluaXRlUXVlcnlSZXN1bHQ8VERhdGEsIFRFcnJvcj5cblxuLyoqXG4gKiBJbmplY3RzIGFuIGluZmluaXRlIHF1ZXJ5OiBhIGRlY2xhcmF0aXZlIGRlcGVuZGVuY3kgb24gYW4gYXN5bmNocm9ub3VzIHNvdXJjZSBvZiBkYXRhIHRoYXQgaXMgdGllZCB0byBhIHVuaXF1ZSBrZXkuXG4gKiBJbmZpbml0ZSBxdWVyaWVzIGNhbiBhZGRpdGl2ZWx5IFwibG9hZCBtb3JlXCIgZGF0YSBvbnRvIGFuIGV4aXN0aW5nIHNldCBvZiBkYXRhIG9yIFwiaW5maW5pdGUgc2Nyb2xsXCJcbiAqIEBwYXJhbSBvcHRpb25zRm4gLSBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBpbmZpbml0ZSBxdWVyeSBvcHRpb25zLlxuICogQHBhcmFtIGluamVjdG9yIC0gVGhlIEFuZ3VsYXIgaW5qZWN0b3IgdG8gdXNlLlxuICogQHJldHVybnMgVGhlIGluZmluaXRlIHF1ZXJ5IHJlc3VsdC5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluamVjdEluZmluaXRlUXVlcnkoXG4gIG9wdGlvbnNGbjogKGNsaWVudDogUXVlcnlDbGllbnQpID0+IENyZWF0ZUluZmluaXRlUXVlcnlPcHRpb25zLFxuICBpbmplY3Rvcj86IEluamVjdG9yLFxuKSB7XG4gIHJldHVybiBhc3NlcnRJbmplY3RvcihpbmplY3RJbmZpbml0ZVF1ZXJ5LCBpbmplY3RvciwgKCkgPT5cbiAgICBjcmVhdGVCYXNlUXVlcnkob3B0aW9uc0ZuLCBJbmZpbml0ZVF1ZXJ5T2JzZXJ2ZXIgYXMgdHlwZW9mIFF1ZXJ5T2JzZXJ2ZXIpLFxuICApXG59XG4iXX0=