import { DestroyRef, NgZone, effect, inject, signal, untracked, } from '@angular/core';
import { notifyManager, replaceEqualDeep } from '@tanstack/query-core';
import { assertInjector } from './util/assert-injector/assert-injector';
import { injectQueryClient } from './inject-query-client';
import { lazySignalInitializer } from './util/lazy-signal-initializer/lazy-signal-initializer';
function getResult(mutationCache, options) {
    return mutationCache
        .findAll(options.filters)
        .map((mutation) => (options.select ? options.select(mutation) : mutation.state));
}
/**
 * Injects a signal that tracks the state of all mutations.
 * @param mutationStateOptionsFn - A function that returns mutation state options.
 * @param options - The Angular injector to use.
 * @returns The signal that tracks the state of all mutations.
 * @public
 */
export function injectMutationState(mutationStateOptionsFn = () => ({}), options) {
    return assertInjector(injectMutationState, options?.injector, () => {
        const destroyRef = inject(DestroyRef);
        const queryClient = injectQueryClient();
        const ngZone = inject(NgZone);
        const mutationCache = queryClient.getMutationCache();
        return lazySignalInitializer((injector) => {
            const result = signal(getResult(mutationCache, mutationStateOptionsFn()));
            effect(() => {
                const mutationStateOptions = mutationStateOptionsFn();
                untracked(() => {
                    // Setting the signal from an effect because it's both 'computed' from options()
                    // and needs to be set imperatively in the mutationCache listener.
                    result.set(getResult(mutationCache, mutationStateOptions));
                });
            }, { injector });
            const unsubscribe = mutationCache.subscribe(notifyManager.batchCalls(() => {
                const nextResult = replaceEqualDeep(result(), getResult(mutationCache, mutationStateOptionsFn()));
                if (result() !== nextResult) {
                    ngZone.run(() => {
                        result.set(nextResult);
                    });
                }
            }));
            destroyRef.onDestroy(unsubscribe);
            return result;
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0LW11dGF0aW9uLXN0YXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2luamVjdC1tdXRhdGlvbi1zdGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsVUFBVSxFQUNWLE1BQU0sRUFDTixNQUFNLEVBQ04sTUFBTSxFQUNOLE1BQU0sRUFDTixTQUFTLEdBQ1YsTUFBTSxlQUFlLENBQUE7QUFDdEIsT0FBTyxFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFBO0FBQ3RFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQTtBQUN2RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQTtBQUN6RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQTtBQWM5RixTQUFTLFNBQVMsQ0FDaEIsYUFBNEIsRUFDNUIsT0FBc0M7SUFFdEMsT0FBTyxhQUFhO1NBQ2pCLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1NBQ3hCLEdBQUcsQ0FDRixDQUFDLFFBQVEsRUFBVyxFQUFFLENBQ3BCLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBWSxDQUMxRSxDQUFBO0FBQ0wsQ0FBQztBQVNEOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxtQkFBbUIsQ0FDakMseUJBQThELEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ3hFLE9BQW9DO0lBRXBDLE9BQU8sY0FBYyxDQUFDLG1CQUFtQixFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFO1FBQ2pFLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUNyQyxNQUFNLFdBQVcsR0FBRyxpQkFBaUIsRUFBRSxDQUFBO1FBQ3ZDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUU3QixNQUFNLGFBQWEsR0FBRyxXQUFXLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQTtRQUVwRCxPQUFPLHFCQUFxQixDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDeEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUNuQixTQUFTLENBQUMsYUFBYSxFQUFFLHNCQUFzQixFQUFFLENBQUMsQ0FDbkQsQ0FBQTtZQUVELE1BQU0sQ0FDSixHQUFHLEVBQUU7Z0JBQ0gsTUFBTSxvQkFBb0IsR0FBRyxzQkFBc0IsRUFBRSxDQUFBO2dCQUNyRCxTQUFTLENBQUMsR0FBRyxFQUFFO29CQUNiLGdGQUFnRjtvQkFDaEYsa0VBQWtFO29CQUNsRSxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsb0JBQW9CLENBQUMsQ0FBQyxDQUFBO2dCQUM1RCxDQUFDLENBQUMsQ0FBQTtZQUNKLENBQUMsRUFDRCxFQUFFLFFBQVEsRUFBRSxDQUNiLENBQUE7WUFFRCxNQUFNLFdBQVcsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUN6QyxhQUFhLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDNUIsTUFBTSxVQUFVLEdBQUcsZ0JBQWdCLENBQ2pDLE1BQU0sRUFBRSxFQUNSLFNBQVMsQ0FBQyxhQUFhLEVBQUUsc0JBQXNCLEVBQUUsQ0FBQyxDQUNuRCxDQUFBO2dCQUNELElBQUksTUFBTSxFQUFFLEtBQUssVUFBVSxFQUFFLENBQUM7b0JBQzVCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO3dCQUNkLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUE7b0JBQ3hCLENBQUMsQ0FBQyxDQUFBO2dCQUNKLENBQUM7WUFDSCxDQUFDLENBQUMsQ0FDSCxDQUFBO1lBRUQsVUFBVSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQTtZQUVqQyxPQUFPLE1BQU0sQ0FBQTtRQUNmLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGVzdHJveVJlZixcbiAgTmdab25lLFxuICBlZmZlY3QsXG4gIGluamVjdCxcbiAgc2lnbmFsLFxuICB1bnRyYWNrZWQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXG5pbXBvcnQgeyBub3RpZnlNYW5hZ2VyLCByZXBsYWNlRXF1YWxEZWVwIH0gZnJvbSAnQHRhbnN0YWNrL3F1ZXJ5LWNvcmUnXG5pbXBvcnQgeyBhc3NlcnRJbmplY3RvciB9IGZyb20gJy4vdXRpbC9hc3NlcnQtaW5qZWN0b3IvYXNzZXJ0LWluamVjdG9yJ1xuaW1wb3J0IHsgaW5qZWN0UXVlcnlDbGllbnQgfSBmcm9tICcuL2luamVjdC1xdWVyeS1jbGllbnQnXG5pbXBvcnQgeyBsYXp5U2lnbmFsSW5pdGlhbGl6ZXIgfSBmcm9tICcuL3V0aWwvbGF6eS1zaWduYWwtaW5pdGlhbGl6ZXIvbGF6eS1zaWduYWwtaW5pdGlhbGl6ZXInXG5pbXBvcnQgdHlwZSB7IEluamVjdG9yLCBTaWduYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xuaW1wb3J0IHR5cGUge1xuICBNdXRhdGlvbixcbiAgTXV0YXRpb25DYWNoZSxcbiAgTXV0YXRpb25GaWx0ZXJzLFxuICBNdXRhdGlvblN0YXRlLFxufSBmcm9tICdAdGFuc3RhY2svcXVlcnktY29yZSdcblxudHlwZSBNdXRhdGlvblN0YXRlT3B0aW9uczxUUmVzdWx0ID0gTXV0YXRpb25TdGF0ZT4gPSB7XG4gIGZpbHRlcnM/OiBNdXRhdGlvbkZpbHRlcnNcbiAgc2VsZWN0PzogKG11dGF0aW9uOiBNdXRhdGlvbikgPT4gVFJlc3VsdFxufVxuXG5mdW5jdGlvbiBnZXRSZXN1bHQ8VFJlc3VsdCA9IE11dGF0aW9uU3RhdGU+KFxuICBtdXRhdGlvbkNhY2hlOiBNdXRhdGlvbkNhY2hlLFxuICBvcHRpb25zOiBNdXRhdGlvblN0YXRlT3B0aW9uczxUUmVzdWx0Pixcbik6IEFycmF5PFRSZXN1bHQ+IHtcbiAgcmV0dXJuIG11dGF0aW9uQ2FjaGVcbiAgICAuZmluZEFsbChvcHRpb25zLmZpbHRlcnMpXG4gICAgLm1hcChcbiAgICAgIChtdXRhdGlvbik6IFRSZXN1bHQgPT5cbiAgICAgICAgKG9wdGlvbnMuc2VsZWN0ID8gb3B0aW9ucy5zZWxlY3QobXV0YXRpb24pIDogbXV0YXRpb24uc3RhdGUpIGFzIFRSZXN1bHQsXG4gICAgKVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbmplY3RNdXRhdGlvblN0YXRlT3B0aW9ucyB7XG4gIGluamVjdG9yPzogSW5qZWN0b3Jcbn1cblxuLyoqXG4gKiBJbmplY3RzIGEgc2lnbmFsIHRoYXQgdHJhY2tzIHRoZSBzdGF0ZSBvZiBhbGwgbXV0YXRpb25zLlxuICogQHBhcmFtIG11dGF0aW9uU3RhdGVPcHRpb25zRm4gLSBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBtdXRhdGlvbiBzdGF0ZSBvcHRpb25zLlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgQW5ndWxhciBpbmplY3RvciB0byB1c2UuXG4gKiBAcmV0dXJucyBUaGUgc2lnbmFsIHRoYXQgdHJhY2tzIHRoZSBzdGF0ZSBvZiBhbGwgbXV0YXRpb25zLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0TXV0YXRpb25TdGF0ZTxUUmVzdWx0ID0gTXV0YXRpb25TdGF0ZT4oXG4gIG11dGF0aW9uU3RhdGVPcHRpb25zRm46ICgpID0+IE11dGF0aW9uU3RhdGVPcHRpb25zPFRSZXN1bHQ+ID0gKCkgPT4gKHt9KSxcbiAgb3B0aW9ucz86IEluamVjdE11dGF0aW9uU3RhdGVPcHRpb25zLFxuKTogU2lnbmFsPEFycmF5PFRSZXN1bHQ+PiB7XG4gIHJldHVybiBhc3NlcnRJbmplY3RvcihpbmplY3RNdXRhdGlvblN0YXRlLCBvcHRpb25zPy5pbmplY3RvciwgKCkgPT4ge1xuICAgIGNvbnN0IGRlc3Ryb3lSZWYgPSBpbmplY3QoRGVzdHJveVJlZilcbiAgICBjb25zdCBxdWVyeUNsaWVudCA9IGluamVjdFF1ZXJ5Q2xpZW50KClcbiAgICBjb25zdCBuZ1pvbmUgPSBpbmplY3QoTmdab25lKVxuXG4gICAgY29uc3QgbXV0YXRpb25DYWNoZSA9IHF1ZXJ5Q2xpZW50LmdldE11dGF0aW9uQ2FjaGUoKVxuXG4gICAgcmV0dXJuIGxhenlTaWduYWxJbml0aWFsaXplcigoaW5qZWN0b3IpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHNpZ25hbDxBcnJheTxUUmVzdWx0Pj4oXG4gICAgICAgIGdldFJlc3VsdChtdXRhdGlvbkNhY2hlLCBtdXRhdGlvblN0YXRlT3B0aW9uc0ZuKCkpLFxuICAgICAgKVxuXG4gICAgICBlZmZlY3QoXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICBjb25zdCBtdXRhdGlvblN0YXRlT3B0aW9ucyA9IG11dGF0aW9uU3RhdGVPcHRpb25zRm4oKVxuICAgICAgICAgIHVudHJhY2tlZCgoKSA9PiB7XG4gICAgICAgICAgICAvLyBTZXR0aW5nIHRoZSBzaWduYWwgZnJvbSBhbiBlZmZlY3QgYmVjYXVzZSBpdCdzIGJvdGggJ2NvbXB1dGVkJyBmcm9tIG9wdGlvbnMoKVxuICAgICAgICAgICAgLy8gYW5kIG5lZWRzIHRvIGJlIHNldCBpbXBlcmF0aXZlbHkgaW4gdGhlIG11dGF0aW9uQ2FjaGUgbGlzdGVuZXIuXG4gICAgICAgICAgICByZXN1bHQuc2V0KGdldFJlc3VsdChtdXRhdGlvbkNhY2hlLCBtdXRhdGlvblN0YXRlT3B0aW9ucykpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgeyBpbmplY3RvciB9LFxuICAgICAgKVxuXG4gICAgICBjb25zdCB1bnN1YnNjcmliZSA9IG11dGF0aW9uQ2FjaGUuc3Vic2NyaWJlKFxuICAgICAgICBub3RpZnlNYW5hZ2VyLmJhdGNoQ2FsbHMoKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IG5leHRSZXN1bHQgPSByZXBsYWNlRXF1YWxEZWVwKFxuICAgICAgICAgICAgcmVzdWx0KCksXG4gICAgICAgICAgICBnZXRSZXN1bHQobXV0YXRpb25DYWNoZSwgbXV0YXRpb25TdGF0ZU9wdGlvbnNGbigpKSxcbiAgICAgICAgICApXG4gICAgICAgICAgaWYgKHJlc3VsdCgpICE9PSBuZXh0UmVzdWx0KSB7XG4gICAgICAgICAgICBuZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICAgICAgcmVzdWx0LnNldChuZXh0UmVzdWx0KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgKVxuXG4gICAgICBkZXN0cm95UmVmLm9uRGVzdHJveSh1bnN1YnNjcmliZSlcblxuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH0pXG4gIH0pXG59XG4iXX0=