import { DestroyRef, Injector, NgZone, computed, effect, inject, runInInjectionContext, signal, } from '@angular/core';
import { MutationObserver, notifyManager } from '@tanstack/query-core';
import { assertInjector } from './util/assert-injector/assert-injector';
import { signalProxy } from './signal-proxy';
import { injectQueryClient } from './inject-query-client';
import { noop, shouldThrowError } from './util';
import { lazyInit } from './util/lazy-init/lazy-init';
/**
 * Injects a mutation: an imperative function that can be invoked which typically performs server side effects.
 *
 * Unlike queries, mutations are not run automatically.
 * @param optionsFn - A function that returns mutation options.
 * @param injector - The Angular injector to use.
 * @returns The mutation.
 * @public
 */
export function injectMutation(optionsFn, injector) {
    return assertInjector(injectMutation, injector, () => {
        const queryClient = injectQueryClient();
        const currentInjector = inject(Injector);
        const destroyRef = inject(DestroyRef);
        const ngZone = inject(NgZone);
        return lazyInit(() => runInInjectionContext(currentInjector, () => {
            const observer = new MutationObserver(queryClient, optionsFn(queryClient));
            const mutate = (variables, mutateOptions) => {
                observer.mutate(variables, mutateOptions).catch(noop);
            };
            effect(() => {
                observer.setOptions(runInInjectionContext(currentInjector, () => optionsFn(queryClient)));
            });
            const result = signal(observer.getCurrentResult());
            const unsubscribe = observer.subscribe(notifyManager.batchCalls((state) => {
                ngZone.run(() => {
                    if (state.isError &&
                        shouldThrowError(observer.options.throwOnError, [state.error])) {
                        throw state.error;
                    }
                    result.set(state);
                });
            }));
            destroyRef.onDestroy(unsubscribe);
            const resultSignal = computed(() => ({
                ...result(),
                mutate,
                mutateAsync: result().mutate,
            }));
            return signalProxy(resultSignal);
        }));
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0LW11dGF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2luamVjdC1tdXRhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsVUFBVSxFQUNWLFFBQVEsRUFDUixNQUFNLEVBQ04sUUFBUSxFQUNSLE1BQU0sRUFDTixNQUFNLEVBQ04scUJBQXFCLEVBQ3JCLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQTtBQUN0QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFDdEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdDQUF3QyxDQUFBO0FBQ3ZFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQUM1QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQTtBQUN6RCxPQUFPLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sUUFBUSxDQUFBO0FBRS9DLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQVlyRDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sVUFBVSxjQUFjLENBTTVCLFNBRStELEVBQy9ELFFBQW1CO0lBRW5CLE9BQU8sY0FBYyxDQUFDLGNBQWMsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFO1FBQ25ELE1BQU0sV0FBVyxHQUFHLGlCQUFpQixFQUFFLENBQUE7UUFDdkMsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ3hDLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUNyQyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7UUFFN0IsT0FBTyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQ25CLHFCQUFxQixDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7WUFDMUMsTUFBTSxRQUFRLEdBQUcsSUFBSSxnQkFBZ0IsQ0FLbkMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFBO1lBQ3RDLE1BQU0sTUFBTSxHQUtSLENBQUMsU0FBUyxFQUFFLGFBQWEsRUFBRSxFQUFFO2dCQUMvQixRQUFRLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDdkQsQ0FBQyxDQUFBO1lBRUQsTUFBTSxDQUFDLEdBQUcsRUFBRTtnQkFDVixRQUFRLENBQUMsVUFBVSxDQUNqQixxQkFBcUIsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFLENBQzFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FDdkIsQ0FDRixDQUFBO1lBQ0gsQ0FBQyxDQUFDLENBQUE7WUFFRixNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQTtZQUVsRCxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUNwQyxhQUFhLENBQUMsVUFBVSxDQUN0QixDQUNFLEtBS0MsRUFDRCxFQUFFO2dCQUNGLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO29CQUNkLElBQ0UsS0FBSyxDQUFDLE9BQU87d0JBQ2IsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFDOUQsQ0FBQzt3QkFDRCxNQUFNLEtBQUssQ0FBQyxLQUFLLENBQUE7b0JBQ25CLENBQUM7b0JBQ0QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtnQkFDbkIsQ0FBQyxDQUFDLENBQUE7WUFDSixDQUFDLENBQ0YsQ0FDRixDQUFBO1lBRUQsVUFBVSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQTtZQUVqQyxNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztnQkFDbkMsR0FBRyxNQUFNLEVBQUU7Z0JBQ1gsTUFBTTtnQkFDTixXQUFXLEVBQUUsTUFBTSxFQUFFLENBQUMsTUFBTTthQUM3QixDQUFDLENBQUMsQ0FBQTtZQUVILE9BQU8sV0FBVyxDQUFDLFlBQVksQ0FLOUIsQ0FBQTtRQUNILENBQUMsQ0FBQyxDQUNILENBQUE7SUFDSCxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEZXN0cm95UmVmLFxuICBJbmplY3RvcixcbiAgTmdab25lLFxuICBjb21wdXRlZCxcbiAgZWZmZWN0LFxuICBpbmplY3QsXG4gIHJ1bkluSW5qZWN0aW9uQ29udGV4dCxcbiAgc2lnbmFsLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJ1xuaW1wb3J0IHsgTXV0YXRpb25PYnNlcnZlciwgbm90aWZ5TWFuYWdlciB9IGZyb20gJ0B0YW5zdGFjay9xdWVyeS1jb3JlJ1xuaW1wb3J0IHsgYXNzZXJ0SW5qZWN0b3IgfSBmcm9tICcuL3V0aWwvYXNzZXJ0LWluamVjdG9yL2Fzc2VydC1pbmplY3RvcidcbmltcG9ydCB7IHNpZ25hbFByb3h5IH0gZnJvbSAnLi9zaWduYWwtcHJveHknXG5pbXBvcnQgeyBpbmplY3RRdWVyeUNsaWVudCB9IGZyb20gJy4vaW5qZWN0LXF1ZXJ5LWNsaWVudCdcbmltcG9ydCB7IG5vb3AsIHNob3VsZFRocm93RXJyb3IgfSBmcm9tICcuL3V0aWwnXG5cbmltcG9ydCB7IGxhenlJbml0IH0gZnJvbSAnLi91dGlsL2xhenktaW5pdC9sYXp5LWluaXQnXG5pbXBvcnQgdHlwZSB7XG4gIERlZmF1bHRFcnJvcixcbiAgTXV0YXRpb25PYnNlcnZlclJlc3VsdCxcbiAgUXVlcnlDbGllbnQsXG59IGZyb20gJ0B0YW5zdGFjay9xdWVyeS1jb3JlJ1xuaW1wb3J0IHR5cGUge1xuICBDcmVhdGVNdXRhdGVGdW5jdGlvbixcbiAgQ3JlYXRlTXV0YXRpb25PcHRpb25zLFxuICBDcmVhdGVNdXRhdGlvblJlc3VsdCxcbn0gZnJvbSAnLi90eXBlcydcblxuLyoqXG4gKiBJbmplY3RzIGEgbXV0YXRpb246IGFuIGltcGVyYXRpdmUgZnVuY3Rpb24gdGhhdCBjYW4gYmUgaW52b2tlZCB3aGljaCB0eXBpY2FsbHkgcGVyZm9ybXMgc2VydmVyIHNpZGUgZWZmZWN0cy5cbiAqXG4gKiBVbmxpa2UgcXVlcmllcywgbXV0YXRpb25zIGFyZSBub3QgcnVuIGF1dG9tYXRpY2FsbHkuXG4gKiBAcGFyYW0gb3B0aW9uc0ZuIC0gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgbXV0YXRpb24gb3B0aW9ucy5cbiAqIEBwYXJhbSBpbmplY3RvciAtIFRoZSBBbmd1bGFyIGluamVjdG9yIHRvIHVzZS5cbiAqIEByZXR1cm5zIFRoZSBtdXRhdGlvbi5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluamVjdE11dGF0aW9uPFxuICBURGF0YSA9IHVua25vd24sXG4gIFRFcnJvciA9IERlZmF1bHRFcnJvcixcbiAgVFZhcmlhYmxlcyA9IHZvaWQsXG4gIFRDb250ZXh0ID0gdW5rbm93bixcbj4oXG4gIG9wdGlvbnNGbjogKFxuICAgIGNsaWVudDogUXVlcnlDbGllbnQsXG4gICkgPT4gQ3JlYXRlTXV0YXRpb25PcHRpb25zPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXMsIFRDb250ZXh0PixcbiAgaW5qZWN0b3I/OiBJbmplY3Rvcixcbik6IENyZWF0ZU11dGF0aW9uUmVzdWx0PFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXMsIFRDb250ZXh0PiB7XG4gIHJldHVybiBhc3NlcnRJbmplY3RvcihpbmplY3RNdXRhdGlvbiwgaW5qZWN0b3IsICgpID0+IHtcbiAgICBjb25zdCBxdWVyeUNsaWVudCA9IGluamVjdFF1ZXJ5Q2xpZW50KClcbiAgICBjb25zdCBjdXJyZW50SW5qZWN0b3IgPSBpbmplY3QoSW5qZWN0b3IpXG4gICAgY29uc3QgZGVzdHJveVJlZiA9IGluamVjdChEZXN0cm95UmVmKVxuICAgIGNvbnN0IG5nWm9uZSA9IGluamVjdChOZ1pvbmUpXG5cbiAgICByZXR1cm4gbGF6eUluaXQoKCkgPT5cbiAgICAgIHJ1bkluSW5qZWN0aW9uQ29udGV4dChjdXJyZW50SW5qZWN0b3IsICgpID0+IHtcbiAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcjxcbiAgICAgICAgICBURGF0YSxcbiAgICAgICAgICBURXJyb3IsXG4gICAgICAgICAgVFZhcmlhYmxlcyxcbiAgICAgICAgICBUQ29udGV4dFxuICAgICAgICA+KHF1ZXJ5Q2xpZW50LCBvcHRpb25zRm4ocXVlcnlDbGllbnQpKVxuICAgICAgICBjb25zdCBtdXRhdGU6IENyZWF0ZU11dGF0ZUZ1bmN0aW9uPFxuICAgICAgICAgIFREYXRhLFxuICAgICAgICAgIFRFcnJvcixcbiAgICAgICAgICBUVmFyaWFibGVzLFxuICAgICAgICAgIFRDb250ZXh0XG4gICAgICAgID4gPSAodmFyaWFibGVzLCBtdXRhdGVPcHRpb25zKSA9PiB7XG4gICAgICAgICAgb2JzZXJ2ZXIubXV0YXRlKHZhcmlhYmxlcywgbXV0YXRlT3B0aW9ucykuY2F0Y2gobm9vcClcbiAgICAgICAgfVxuXG4gICAgICAgIGVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgb2JzZXJ2ZXIuc2V0T3B0aW9ucyhcbiAgICAgICAgICAgIHJ1bkluSW5qZWN0aW9uQ29udGV4dChjdXJyZW50SW5qZWN0b3IsICgpID0+XG4gICAgICAgICAgICAgIG9wdGlvbnNGbihxdWVyeUNsaWVudCksXG4gICAgICAgICAgICApLFxuICAgICAgICAgIClcbiAgICAgICAgfSlcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBzaWduYWwob2JzZXJ2ZXIuZ2V0Q3VycmVudFJlc3VsdCgpKVxuXG4gICAgICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gb2JzZXJ2ZXIuc3Vic2NyaWJlKFxuICAgICAgICAgIG5vdGlmeU1hbmFnZXIuYmF0Y2hDYWxscyhcbiAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgc3RhdGU6IE11dGF0aW9uT2JzZXJ2ZXJSZXN1bHQ8XG4gICAgICAgICAgICAgICAgVERhdGEsXG4gICAgICAgICAgICAgICAgVEVycm9yLFxuICAgICAgICAgICAgICAgIFRWYXJpYWJsZXMsXG4gICAgICAgICAgICAgICAgVENvbnRleHRcbiAgICAgICAgICAgICAgPixcbiAgICAgICAgICAgICkgPT4ge1xuICAgICAgICAgICAgICBuZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICBzdGF0ZS5pc0Vycm9yICYmXG4gICAgICAgICAgICAgICAgICBzaG91bGRUaHJvd0Vycm9yKG9ic2VydmVyLm9wdGlvbnMudGhyb3dPbkVycm9yLCBbc3RhdGUuZXJyb3JdKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgc3RhdGUuZXJyb3JcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0LnNldChzdGF0ZSlcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKSxcbiAgICAgICAgKVxuXG4gICAgICAgIGRlc3Ryb3lSZWYub25EZXN0cm95KHVuc3Vic2NyaWJlKVxuXG4gICAgICAgIGNvbnN0IHJlc3VsdFNpZ25hbCA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICAgICAgLi4ucmVzdWx0KCksXG4gICAgICAgICAgbXV0YXRlLFxuICAgICAgICAgIG11dGF0ZUFzeW5jOiByZXN1bHQoKS5tdXRhdGUsXG4gICAgICAgIH0pKVxuXG4gICAgICAgIHJldHVybiBzaWduYWxQcm94eShyZXN1bHRTaWduYWwpIGFzIHVua25vd24gYXMgQ3JlYXRlTXV0YXRpb25SZXN1bHQ8XG4gICAgICAgICAgVERhdGEsXG4gICAgICAgICAgVEVycm9yLFxuICAgICAgICAgIFRWYXJpYWJsZXMsXG4gICAgICAgICAgVENvbnRleHRcbiAgICAgICAgPlxuICAgICAgfSksXG4gICAgKVxuICB9KVxufVxuIl19