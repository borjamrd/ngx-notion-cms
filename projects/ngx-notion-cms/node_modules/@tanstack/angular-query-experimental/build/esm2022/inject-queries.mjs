import { QueriesObserver, notifyManager } from '@tanstack/query-core';
import { DestroyRef, computed, effect, inject, signal } from '@angular/core';
import { assertInjector } from './util/assert-injector/assert-injector';
import { injectQueryClient } from './inject-query-client';
/**
 * @public
 */
export function injectQueries({ queries, ...options }, injector) {
    return assertInjector(injectQueries, injector, () => {
        const queryClient = injectQueryClient();
        const destroyRef = inject(DestroyRef);
        const defaultedQueries = computed(() => {
            return queries().map((opts) => {
                const defaultedOptions = queryClient.defaultQueryOptions(opts);
                // Make sure the results are already in fetching state before subscribing or updating options
                defaultedOptions._optimisticResults = 'optimistic';
                return defaultedOptions;
            });
        });
        const observer = new QueriesObserver(queryClient, defaultedQueries(), options);
        // Do not notify on updates because of changes in the options because
        // these changes should already be reflected in the optimistic result.
        effect(() => {
            observer.setQueries(defaultedQueries(), options, { listeners: false });
        });
        const [, getCombinedResult] = observer.getOptimisticResult(defaultedQueries(), options.combine);
        const result = signal(getCombinedResult());
        const unsubscribe = observer.subscribe(notifyManager.batchCalls(result.set));
        destroyRef.onDestroy(unsubscribe);
        return result;
    });
}
//# sourceMappingURL=data:application/json;base64,