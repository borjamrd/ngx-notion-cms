/**
 * Allows to share and re-use query options in a type-safe way.
 *
 * The `queryKey` will be tagged with the type from `queryFn`.
 *
 * **Example**
 *
 * ```ts
 *  const { queryKey } = queryOptions({
 *     queryKey: ['key'],
 *     queryFn: () => Promise.resolve(5),
 *     //  ^?  Promise<number>
 *   })
 *
 *   const queryClient = new QueryClient()
 *   const data = queryClient.getQueryData(queryKey)
 *   //    ^?  number | undefined
 * ```
 * @param options - The query options to tag with the type from `queryFn`.
 * @returns The tagged query options.
 * @public
 */
export function queryOptions(options) {
    return options;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnktb3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9xdWVyeS1vcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9HQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBcUJHO0FBQ0gsTUFBTSxVQUFVLFlBQVksQ0FBQyxPQUFnQjtJQUMzQyxPQUFPLE9BQU8sQ0FBQTtBQUNoQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUge1xuICBEYXRhVGFnLFxuICBEZWZhdWx0RXJyb3IsXG4gIEluaXRpYWxEYXRhRnVuY3Rpb24sXG4gIFF1ZXJ5S2V5LFxufSBmcm9tICdAdGFuc3RhY2svcXVlcnktY29yZSdcbmltcG9ydCB0eXBlIHsgQ3JlYXRlUXVlcnlPcHRpb25zLCBOb25VbmRlZmluZWRHdWFyZCB9IGZyb20gJy4vdHlwZXMnXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBVbmRlZmluZWRJbml0aWFsRGF0YU9wdGlvbnM8XG4gIFRRdWVyeUZuRGF0YSA9IHVua25vd24sXG4gIFRFcnJvciA9IERlZmF1bHRFcnJvcixcbiAgVERhdGEgPSBUUXVlcnlGbkRhdGEsXG4gIFRRdWVyeUtleSBleHRlbmRzIFF1ZXJ5S2V5ID0gUXVlcnlLZXksXG4+ID0gQ3JlYXRlUXVlcnlPcHRpb25zPFRRdWVyeUZuRGF0YSwgVEVycm9yLCBURGF0YSwgVFF1ZXJ5S2V5PiAmIHtcbiAgaW5pdGlhbERhdGE/OiB1bmRlZmluZWQgfCBJbml0aWFsRGF0YUZ1bmN0aW9uPE5vblVuZGVmaW5lZEd1YXJkPFRRdWVyeUZuRGF0YT4+XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBEZWZpbmVkSW5pdGlhbERhdGFPcHRpb25zPFxuICBUUXVlcnlGbkRhdGEgPSB1bmtub3duLFxuICBURXJyb3IgPSBEZWZhdWx0RXJyb3IsXG4gIFREYXRhID0gVFF1ZXJ5Rm5EYXRhLFxuICBUUXVlcnlLZXkgZXh0ZW5kcyBRdWVyeUtleSA9IFF1ZXJ5S2V5LFxuPiA9IENyZWF0ZVF1ZXJ5T3B0aW9uczxUUXVlcnlGbkRhdGEsIFRFcnJvciwgVERhdGEsIFRRdWVyeUtleT4gJiB7XG4gIGluaXRpYWxEYXRhOlxuICAgIHwgTm9uVW5kZWZpbmVkR3VhcmQ8VFF1ZXJ5Rm5EYXRhPlxuICAgIHwgKCgpID0+IE5vblVuZGVmaW5lZEd1YXJkPFRRdWVyeUZuRGF0YT4pXG59XG5cbi8qKlxuICogQWxsb3dzIHRvIHNoYXJlIGFuZCByZS11c2UgcXVlcnkgb3B0aW9ucyBpbiBhIHR5cGUtc2FmZSB3YXkuXG4gKlxuICogVGhlIGBxdWVyeUtleWAgd2lsbCBiZSB0YWdnZWQgd2l0aCB0aGUgdHlwZSBmcm9tIGBxdWVyeUZuYC5cbiAqXG4gKiAqKkV4YW1wbGUqKlxuICpcbiAqIGBgYHRzXG4gKiAgY29uc3QgeyBxdWVyeUtleSB9ID0gcXVlcnlPcHRpb25zKHtcbiAqICAgICBxdWVyeUtleTogWydrZXknXSxcbiAqICAgICBxdWVyeUZuOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoNSksXG4gKiAgICAgLy8gIF4/ICBQcm9taXNlPG51bWJlcj5cbiAqICAgfSlcbiAqXG4gKiAgIGNvbnN0IHF1ZXJ5Q2xpZW50ID0gbmV3IFF1ZXJ5Q2xpZW50KClcbiAqICAgY29uc3QgZGF0YSA9IHF1ZXJ5Q2xpZW50LmdldFF1ZXJ5RGF0YShxdWVyeUtleSlcbiAqICAgLy8gICAgXj8gIG51bWJlciB8IHVuZGVmaW5lZFxuICogYGBgXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBxdWVyeSBvcHRpb25zIHRvIHRhZyB3aXRoIHRoZSB0eXBlIGZyb20gYHF1ZXJ5Rm5gLlxuICogQHJldHVybnMgVGhlIHRhZ2dlZCBxdWVyeSBvcHRpb25zLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gcXVlcnlPcHRpb25zPFxuICBUUXVlcnlGbkRhdGEgPSB1bmtub3duLFxuICBURXJyb3IgPSBEZWZhdWx0RXJyb3IsXG4gIFREYXRhID0gVFF1ZXJ5Rm5EYXRhLFxuICBUUXVlcnlLZXkgZXh0ZW5kcyBRdWVyeUtleSA9IFF1ZXJ5S2V5LFxuPihcbiAgb3B0aW9uczogRGVmaW5lZEluaXRpYWxEYXRhT3B0aW9uczxUUXVlcnlGbkRhdGEsIFRFcnJvciwgVERhdGEsIFRRdWVyeUtleT4sXG4pOiBEZWZpbmVkSW5pdGlhbERhdGFPcHRpb25zPFRRdWVyeUZuRGF0YSwgVEVycm9yLCBURGF0YSwgVFF1ZXJ5S2V5PiAmIHtcbiAgcXVlcnlLZXk6IERhdGFUYWc8VFF1ZXJ5S2V5LCBUUXVlcnlGbkRhdGE+XG59XG5cbi8qKlxuICogQWxsb3dzIHRvIHNoYXJlIGFuZCByZS11c2UgcXVlcnkgb3B0aW9ucyBpbiBhIHR5cGUtc2FmZSB3YXkuXG4gKlxuICogVGhlIGBxdWVyeUtleWAgd2lsbCBiZSB0YWdnZWQgd2l0aCB0aGUgdHlwZSBmcm9tIGBxdWVyeUZuYC5cbiAqXG4gKiAqKkV4YW1wbGUqKlxuICpcbiAqIGBgYHRzXG4gKiAgY29uc3QgeyBxdWVyeUtleSB9ID0gcXVlcnlPcHRpb25zKHtcbiAqICAgICBxdWVyeUtleTogWydrZXknXSxcbiAqICAgICBxdWVyeUZuOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoNSksXG4gKiAgICAgLy8gIF4/ICBQcm9taXNlPG51bWJlcj5cbiAqICAgfSlcbiAqXG4gKiAgIGNvbnN0IHF1ZXJ5Q2xpZW50ID0gbmV3IFF1ZXJ5Q2xpZW50KClcbiAqICAgY29uc3QgZGF0YSA9IHF1ZXJ5Q2xpZW50LmdldFF1ZXJ5RGF0YShxdWVyeUtleSlcbiAqICAgLy8gICAgXj8gIG51bWJlciB8IHVuZGVmaW5lZFxuICogYGBgXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBxdWVyeSBvcHRpb25zIHRvIHRhZyB3aXRoIHRoZSB0eXBlIGZyb20gYHF1ZXJ5Rm5gLlxuICogQHJldHVybnMgVGhlIHRhZ2dlZCBxdWVyeSBvcHRpb25zLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gcXVlcnlPcHRpb25zPFxuICBUUXVlcnlGbkRhdGEgPSB1bmtub3duLFxuICBURXJyb3IgPSBEZWZhdWx0RXJyb3IsXG4gIFREYXRhID0gVFF1ZXJ5Rm5EYXRhLFxuICBUUXVlcnlLZXkgZXh0ZW5kcyBRdWVyeUtleSA9IFF1ZXJ5S2V5LFxuPihcbiAgb3B0aW9uczogVW5kZWZpbmVkSW5pdGlhbERhdGFPcHRpb25zPFRRdWVyeUZuRGF0YSwgVEVycm9yLCBURGF0YSwgVFF1ZXJ5S2V5Pixcbik6IFVuZGVmaW5lZEluaXRpYWxEYXRhT3B0aW9uczxUUXVlcnlGbkRhdGEsIFRFcnJvciwgVERhdGEsIFRRdWVyeUtleT4gJiB7XG4gIHF1ZXJ5S2V5OiBEYXRhVGFnPFRRdWVyeUtleSwgVFF1ZXJ5Rm5EYXRhPlxufVxuXG4vKipcbiAqIEFsbG93cyB0byBzaGFyZSBhbmQgcmUtdXNlIHF1ZXJ5IG9wdGlvbnMgaW4gYSB0eXBlLXNhZmUgd2F5LlxuICpcbiAqIFRoZSBgcXVlcnlLZXlgIHdpbGwgYmUgdGFnZ2VkIHdpdGggdGhlIHR5cGUgZnJvbSBgcXVlcnlGbmAuXG4gKlxuICogKipFeGFtcGxlKipcbiAqXG4gKiBgYGB0c1xuICogIGNvbnN0IHsgcXVlcnlLZXkgfSA9IHF1ZXJ5T3B0aW9ucyh7XG4gKiAgICAgcXVlcnlLZXk6IFsna2V5J10sXG4gKiAgICAgcXVlcnlGbjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKDUpLFxuICogICAgIC8vICBePyAgUHJvbWlzZTxudW1iZXI+XG4gKiAgIH0pXG4gKlxuICogICBjb25zdCBxdWVyeUNsaWVudCA9IG5ldyBRdWVyeUNsaWVudCgpXG4gKiAgIGNvbnN0IGRhdGEgPSBxdWVyeUNsaWVudC5nZXRRdWVyeURhdGEocXVlcnlLZXkpXG4gKiAgIC8vICAgIF4/ICBudW1iZXIgfCB1bmRlZmluZWRcbiAqIGBgYFxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgcXVlcnkgb3B0aW9ucyB0byB0YWcgd2l0aCB0aGUgdHlwZSBmcm9tIGBxdWVyeUZuYC5cbiAqIEByZXR1cm5zIFRoZSB0YWdnZWQgcXVlcnkgb3B0aW9ucy5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5T3B0aW9ucyhvcHRpb25zOiB1bmtub3duKSB7XG4gIHJldHVybiBvcHRpb25zXG59XG4iXX0=