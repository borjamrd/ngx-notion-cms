import { computed, untracked } from '@angular/core';
/**
 * Exposes fields of an object passed via an Angular `Signal` as `Computed` signals.
 * Functions on the object are passed through as-is.
 * @param inputSignal - `Signal` that must return an object.
 * @returns A proxy object with the same fields as the input object, but with each field wrapped in a `Computed` signal.
 */
export function signalProxy(inputSignal) {
    const internalState = {};
    return new Proxy(internalState, {
        get(target, prop) {
            // first check if we have it in our internal state and return it
            const computedField = target[prop];
            if (computedField)
                return computedField;
            // then, check if it's a function on the resultState and return it
            const targetField = untracked(inputSignal)[prop];
            if (typeof targetField === 'function')
                return targetField;
            // finally, create a computed field, store it and return it
            // @ts-expect-error
            return (target[prop] = computed(() => inputSignal()[prop]));
        },
        has(_, prop) {
            return !!untracked(inputSignal)[prop];
        },
        ownKeys() {
            return Reflect.ownKeys(untracked(inputSignal));
        },
        getOwnPropertyDescriptor() {
            return {
                enumerable: true,
                configurable: true,
            };
        },
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmFsLXByb3h5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NpZ25hbC1wcm94eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQU9uRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxXQUFXLENBQ3pCLFdBQTJCO0lBRTNCLE1BQU0sYUFBYSxHQUFHLEVBQTBCLENBQUE7SUFFaEQsT0FBTyxJQUFJLEtBQUssQ0FBdUIsYUFBYSxFQUFFO1FBQ3BELEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSTtZQUNkLGdFQUFnRTtZQUNoRSxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDbEMsSUFBSSxhQUFhO2dCQUFFLE9BQU8sYUFBYSxDQUFBO1lBRXZDLGtFQUFrRTtZQUNsRSxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDaEQsSUFBSSxPQUFPLFdBQVcsS0FBSyxVQUFVO2dCQUFFLE9BQU8sV0FBVyxDQUFBO1lBRXpELDJEQUEyRDtZQUMzRCxtQkFBbUI7WUFDbkIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzdELENBQUM7UUFDRCxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUk7WUFDVCxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDdkMsQ0FBQztRQUNELE9BQU87WUFDTCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUE7UUFDaEQsQ0FBQztRQUNELHdCQUF3QjtZQUN0QixPQUFPO2dCQUNMLFVBQVUsRUFBRSxJQUFJO2dCQUNoQixZQUFZLEVBQUUsSUFBSTthQUNuQixDQUFBO1FBQ0gsQ0FBQztLQUNGLENBQUMsQ0FBQTtBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb21wdXRlZCwgdW50cmFja2VkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcbmltcG9ydCB0eXBlIHsgU2lnbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcblxuZXhwb3J0IHR5cGUgTWFwVG9TaWduYWxzPFQ+ID0ge1xuICBbSyBpbiBrZXlvZiBUXTogVFtLXSBleHRlbmRzIEZ1bmN0aW9uID8gVFtLXSA6IFNpZ25hbDxUW0tdPlxufVxuXG4vKipcbiAqIEV4cG9zZXMgZmllbGRzIG9mIGFuIG9iamVjdCBwYXNzZWQgdmlhIGFuIEFuZ3VsYXIgYFNpZ25hbGAgYXMgYENvbXB1dGVkYCBzaWduYWxzLlxuICogRnVuY3Rpb25zIG9uIHRoZSBvYmplY3QgYXJlIHBhc3NlZCB0aHJvdWdoIGFzLWlzLlxuICogQHBhcmFtIGlucHV0U2lnbmFsIC0gYFNpZ25hbGAgdGhhdCBtdXN0IHJldHVybiBhbiBvYmplY3QuXG4gKiBAcmV0dXJucyBBIHByb3h5IG9iamVjdCB3aXRoIHRoZSBzYW1lIGZpZWxkcyBhcyB0aGUgaW5wdXQgb2JqZWN0LCBidXQgd2l0aCBlYWNoIGZpZWxkIHdyYXBwZWQgaW4gYSBgQ29tcHV0ZWRgIHNpZ25hbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNpZ25hbFByb3h5PFRJbnB1dCBleHRlbmRzIFJlY29yZDxzdHJpbmcgfCBzeW1ib2wsIGFueT4+KFxuICBpbnB1dFNpZ25hbDogU2lnbmFsPFRJbnB1dD4sXG4pIHtcbiAgY29uc3QgaW50ZXJuYWxTdGF0ZSA9IHt9IGFzIE1hcFRvU2lnbmFsczxUSW5wdXQ+XG5cbiAgcmV0dXJuIG5ldyBQcm94eTxNYXBUb1NpZ25hbHM8VElucHV0Pj4oaW50ZXJuYWxTdGF0ZSwge1xuICAgIGdldCh0YXJnZXQsIHByb3ApIHtcbiAgICAgIC8vIGZpcnN0IGNoZWNrIGlmIHdlIGhhdmUgaXQgaW4gb3VyIGludGVybmFsIHN0YXRlIGFuZCByZXR1cm4gaXRcbiAgICAgIGNvbnN0IGNvbXB1dGVkRmllbGQgPSB0YXJnZXRbcHJvcF1cbiAgICAgIGlmIChjb21wdXRlZEZpZWxkKSByZXR1cm4gY29tcHV0ZWRGaWVsZFxuXG4gICAgICAvLyB0aGVuLCBjaGVjayBpZiBpdCdzIGEgZnVuY3Rpb24gb24gdGhlIHJlc3VsdFN0YXRlIGFuZCByZXR1cm4gaXRcbiAgICAgIGNvbnN0IHRhcmdldEZpZWxkID0gdW50cmFja2VkKGlucHV0U2lnbmFsKVtwcm9wXVxuICAgICAgaWYgKHR5cGVvZiB0YXJnZXRGaWVsZCA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHRhcmdldEZpZWxkXG5cbiAgICAgIC8vIGZpbmFsbHksIGNyZWF0ZSBhIGNvbXB1dGVkIGZpZWxkLCBzdG9yZSBpdCBhbmQgcmV0dXJuIGl0XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICByZXR1cm4gKHRhcmdldFtwcm9wXSA9IGNvbXB1dGVkKCgpID0+IGlucHV0U2lnbmFsKClbcHJvcF0pKVxuICAgIH0sXG4gICAgaGFzKF8sIHByb3ApIHtcbiAgICAgIHJldHVybiAhIXVudHJhY2tlZChpbnB1dFNpZ25hbClbcHJvcF1cbiAgICB9LFxuICAgIG93bktleXMoKSB7XG4gICAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHVudHJhY2tlZChpbnB1dFNpZ25hbCkpXG4gICAgfSxcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB9XG4gICAgfSxcbiAgfSlcbn1cbiJdfQ==