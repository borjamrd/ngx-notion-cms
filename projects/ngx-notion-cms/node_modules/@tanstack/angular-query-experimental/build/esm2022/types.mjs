/* istanbul ignore file */
export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":"AAAA,0BAA0B","sourcesContent":["/* istanbul ignore file */\n\nimport type {\n  DefaultError,\n  DefinedInfiniteQueryObserverResult,\n  DefinedQueryObserverResult,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  MutateFunction,\n  MutationObserverOptions,\n  MutationObserverResult,\n  OmitKeyof,\n  Override,\n  QueryKey,\n  QueryObserverOptions,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { Signal } from '@angular/core'\nimport type { MapToSignals } from './signal-proxy'\n\n/**\n * @public\n */\nexport interface CreateBaseQueryOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {}\n\n/**\n * @public\n */\nexport interface CreateQueryOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends OmitKeyof<\n    CreateBaseQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    'suspense'\n  > {}\n\n/**\n * @public\n */\ntype CreateStatusBasedQueryResult<\n  TStatus extends QueryObserverResult['status'],\n  TData = unknown,\n  TError = DefaultError,\n> = Extract<QueryObserverResult<TData, TError>, { status: TStatus }>\n\n/**\n * @public\n */\nexport interface BaseQueryNarrowing<TData = unknown, TError = DefaultError> {\n  isSuccess: (\n    this: CreateBaseQueryResult<TData, TError>,\n  ) => this is CreateBaseQueryResult<\n    TData,\n    TError,\n    CreateStatusBasedQueryResult<'success', TData, TError>\n  >\n  isError: (\n    this: CreateBaseQueryResult<TData, TError>,\n  ) => this is CreateBaseQueryResult<\n    TData,\n    TError,\n    CreateStatusBasedQueryResult<'error', TData, TError>\n  >\n  isPending: (\n    this: CreateBaseQueryResult<TData, TError>,\n  ) => this is CreateBaseQueryResult<\n    TData,\n    TError,\n    CreateStatusBasedQueryResult<'pending', TData, TError>\n  >\n}\n\n/**\n * @public\n */\nexport interface CreateInfiniteQueryOptions<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n> extends OmitKeyof<\n    InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n    'suspense'\n  > {}\n\n/**\n * @public\n */\nexport type CreateBaseQueryResult<\n  TData = unknown,\n  TError = DefaultError,\n  TState = QueryObserverResult<TData, TError>,\n> = BaseQueryNarrowing<TData, TError> &\n  MapToSignals<OmitKeyof<TState, keyof BaseQueryNarrowing, 'safely'>>\n\n/**\n * @public\n */\nexport type CreateQueryResult<\n  TData = unknown,\n  TError = DefaultError,\n> = CreateBaseQueryResult<TData, TError>\n\n/**\n * @public\n */\nexport type DefinedCreateQueryResult<\n  TData = unknown,\n  TError = DefaultError,\n  TDefinedQueryObserver = DefinedQueryObserverResult<TData, TError>,\n> = MapToSignals<TDefinedQueryObserver>\n\n/**\n * @public\n */\nexport type CreateInfiniteQueryResult<\n  TData = unknown,\n  TError = DefaultError,\n> = MapToSignals<InfiniteQueryObserverResult<TData, TError>>\n\n/**\n * @public\n */\nexport type DefinedCreateInfiniteQueryResult<\n  TData = unknown,\n  TError = DefaultError,\n  TDefinedInfiniteQueryObserver = DefinedInfiniteQueryObserverResult<\n    TData,\n    TError\n  >,\n> = MapToSignals<TDefinedInfiniteQueryObserver>\n\n/**\n * @public\n */\nexport interface CreateMutationOptions<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends OmitKeyof<\n    MutationObserverOptions<TData, TError, TVariables, TContext>,\n    '_defaulted'\n  > {}\n\n/**\n * @public\n */\nexport type CreateMutateFunction<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> = (\n  ...args: Parameters<MutateFunction<TData, TError, TVariables, TContext>>\n) => void\n\n/**\n * @public\n */\nexport type CreateMutateAsyncFunction<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> = MutateFunction<TData, TError, TVariables, TContext>\n\n/**\n * @public\n */\nexport type CreateBaseMutationResult<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> = Override<\n  MutationObserverResult<TData, TError, TVariables, TContext>,\n  { mutate: CreateMutateFunction<TData, TError, TVariables, TContext> }\n> & {\n  mutateAsync: CreateMutateAsyncFunction<TData, TError, TVariables, TContext>\n}\n\n/**\n * @public\n */\ntype CreateStatusBasedMutationResult<\n  TStatus extends CreateBaseMutationResult['status'],\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> = Extract<\n  CreateBaseMutationResult<TData, TError, TVariables, TContext>,\n  { status: TStatus }\n>\n\ntype SignalFunction<T extends () => any> = T & Signal<ReturnType<T>>\n\n/**\n * @public\n */\nexport interface BaseMutationNarrowing<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> {\n  isSuccess: SignalFunction<\n    (\n      this: CreateMutationResult<TData, TError, TVariables, TContext>,\n    ) => this is CreateMutationResult<\n      TData,\n      TError,\n      TVariables,\n      TContext,\n      CreateStatusBasedMutationResult<\n        'success',\n        TData,\n        TError,\n        TVariables,\n        TContext\n      >\n    >\n  >\n  isError: SignalFunction<\n    (\n      this: CreateMutationResult<TData, TError, TVariables, TContext>,\n    ) => this is CreateMutationResult<\n      TData,\n      TError,\n      TVariables,\n      TContext,\n      CreateStatusBasedMutationResult<\n        'error',\n        TData,\n        TError,\n        TVariables,\n        TContext\n      >\n    >\n  >\n  isPending: SignalFunction<\n    (\n      this: CreateMutationResult<TData, TError, TVariables, TContext>,\n    ) => this is CreateMutationResult<\n      TData,\n      TError,\n      TVariables,\n      TContext,\n      CreateStatusBasedMutationResult<\n        'pending',\n        TData,\n        TError,\n        TVariables,\n        TContext\n      >\n    >\n  >\n  isIdle: SignalFunction<\n    (\n      this: CreateMutationResult<TData, TError, TVariables, TContext>,\n    ) => this is CreateMutationResult<\n      TData,\n      TError,\n      TVariables,\n      TContext,\n      CreateStatusBasedMutationResult<\n        'idle',\n        TData,\n        TError,\n        TVariables,\n        TContext\n      >\n    >\n  >\n}\n\n/**\n * @public\n */\nexport type CreateMutationResult<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n  TState = CreateStatusBasedMutationResult<\n    CreateBaseMutationResult['status'],\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >,\n> = BaseMutationNarrowing<TData, TError, TVariables, TContext> &\n  MapToSignals<OmitKeyof<TState, keyof BaseMutationNarrowing, 'safely'>>\n\n/**\n * @public\n */\nexport type NonUndefinedGuard<T> = T extends undefined ? never : T\n"]}