/* eslint-disable cspell/spellchecker */
/**
 * The code in this file is adapted from NG Extension Platform at https://ngxtension.netlify.app.
 *
 * Original Author: Chau Tran
 *
 * NG Extension Platform is an open-source project licensed under the MIT license.
 *
 * For more information about the original code, see
 * https://github.com/nartc/ngxtension-platform
 */
/* eslint-enable */
import { InjectionToken, inject, runInInjectionContext } from '@angular/core';
import { assertInjector } from '../assert-injector/assert-injector';
function createInjectFn(token) {
    return function ({ injector, ...injectOptions } = {}) {
        injector = assertInjector(this, injector);
        return runInInjectionContext(injector, () => inject(token, injectOptions));
    };
}
function createProvideFn(token, factory, opts = {}) {
    const { deps = [], multi = false, extraProviders = [] } = opts;
    return (value, isFunctionValue = false) => {
        let provider;
        if (value !== undefined) {
            // eslint-disable-next-line no-shadow
            const factory = typeof value === 'function'
                ? isFunctionValue
                    ? () => value
                    : value
                : () => value;
            provider = {
                provide: token,
                useFactory: factory,
                multi,
            };
        }
        else {
            provider = {
                provide: token,
                useFactory: factory,
                deps: deps,
                multi,
            };
        }
        return [extraProviders, provider];
    };
}
export function createNoopInjectionToken(description, options) {
    const token = 
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    options?.token ||
        new InjectionToken(description);
    return [
        createInjectFn(token),
        createProvideFn(token, () => null, (options || {})),
        token,
        () => { },
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWluamVjdGlvbi10b2tlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy91dGlsL2NyZWF0ZS1pbmplY3Rpb24tdG9rZW4vY3JlYXRlLWluamVjdGlvbi10b2tlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3Q0FBd0M7QUFDeEM7Ozs7Ozs7OztHQVNHO0FBQ0gsbUJBQW1CO0FBRW5CLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLHFCQUFxQixFQUFFLE1BQU0sZUFBZSxDQUFBO0FBQzdFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQTtBQXVGbkUsU0FBUyxjQUFjLENBQVMsS0FBNkI7SUFDM0QsT0FBTyxVQUVMLEVBQ0UsUUFBUSxFQUNSLEdBQUcsYUFBYSxLQUMyQixFQUFFO1FBRS9DLFFBQVEsR0FBRyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQ3pDLE9BQU8scUJBQXFCLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUMxQyxNQUFNLENBQUMsS0FBSyxFQUFFLGFBQThCLENBQUMsQ0FDOUMsQ0FBQTtJQUNILENBQUMsQ0FBQTtBQUNILENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FPdEIsS0FBNkIsRUFDN0IsT0FBd0MsRUFDeEMsT0FBdUQsRUFBRTtJQUV6RCxNQUFNLEVBQUUsSUFBSSxHQUFHLEVBQUUsRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLGNBQWMsR0FBRyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUE7SUFDOUQsT0FBTyxDQUFDLEtBQStCLEVBQUUsZUFBZSxHQUFHLEtBQUssRUFBRSxFQUFFO1FBQ2xFLElBQUksUUFBa0IsQ0FBQTtRQUN0QixJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUN4QixxQ0FBcUM7WUFDckMsTUFBTSxPQUFPLEdBQ1gsT0FBTyxLQUFLLEtBQUssVUFBVTtnQkFDekIsQ0FBQyxDQUFDLGVBQWU7b0JBQ2YsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUs7b0JBQ2IsQ0FBQyxDQUFDLEtBQUs7Z0JBQ1QsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQTtZQUVqQixRQUFRLEdBQUc7Z0JBQ1QsT0FBTyxFQUFFLEtBQUs7Z0JBQ2QsVUFBVSxFQUFFLE9BQU87Z0JBQ25CLEtBQUs7YUFDTixDQUFBO1FBQ0gsQ0FBQzthQUFNLENBQUM7WUFDTixRQUFRLEdBQUc7Z0JBQ1QsT0FBTyxFQUFFLEtBQUs7Z0JBQ2QsVUFBVSxFQUFFLE9BQU87Z0JBQ25CLElBQUksRUFBRSxJQUErQjtnQkFDckMsS0FBSzthQUNOLENBQUE7UUFDSCxDQUFDO1FBRUQsT0FBTyxDQUFDLGNBQWMsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNuQyxDQUFDLENBQUE7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLHdCQUF3QixDQVF0QyxXQUFtQixFQUFFLE9BQWtCO0lBR3ZDLE1BQU0sS0FBSztJQUNULHVFQUF1RTtJQUN0RSxPQUF1RCxFQUFFLEtBQUs7UUFDL0QsSUFBSSxjQUFjLENBQVUsV0FBVyxDQUFDLENBQUE7SUFDMUMsT0FBTztRQUNMLGNBQWMsQ0FBQyxLQUFLLENBQWlEO1FBQ3JFLGVBQWUsQ0FDYixLQUFLLEVBQ0wsR0FBRyxFQUFFLENBQUMsSUFBSyxFQUNYLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBMkMsQ0FDVjtRQUNqRCxLQUFLO1FBQ0wsR0FBRyxFQUFFLEdBQUUsQ0FBQztLQUNvQyxDQUFBO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBjc3BlbGwvc3BlbGxjaGVja2VyICovXG4vKipcbiAqIFRoZSBjb2RlIGluIHRoaXMgZmlsZSBpcyBhZGFwdGVkIGZyb20gTkcgRXh0ZW5zaW9uIFBsYXRmb3JtIGF0IGh0dHBzOi8vbmd4dGVuc2lvbi5uZXRsaWZ5LmFwcC5cbiAqXG4gKiBPcmlnaW5hbCBBdXRob3I6IENoYXUgVHJhblxuICpcbiAqIE5HIEV4dGVuc2lvbiBQbGF0Zm9ybSBpcyBhbiBvcGVuLXNvdXJjZSBwcm9qZWN0IGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb3JpZ2luYWwgY29kZSwgc2VlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmFydGMvbmd4dGVuc2lvbi1wbGF0Zm9ybVxuICovXG4vKiBlc2xpbnQtZW5hYmxlICovXG5cbmltcG9ydCB7IEluamVjdGlvblRva2VuLCBpbmplY3QsIHJ1bkluSW5qZWN0aW9uQ29udGV4dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXG5pbXBvcnQgeyBhc3NlcnRJbmplY3RvciB9IGZyb20gJy4uL2Fzc2VydC1pbmplY3Rvci9hc3NlcnQtaW5qZWN0b3InXG5pbXBvcnQgdHlwZSB7XG4gIEVudmlyb25tZW50UHJvdmlkZXJzLFxuICBGYWN0b3J5UHJvdmlkZXIsXG4gIEhvc3QsXG4gIEluamVjdE9wdGlvbnMsXG4gIEluamVjdG9yLFxuICBPcHRpb25hbCxcbiAgUHJvdmlkZXIsXG4gIFNlbGYsXG4gIFNraXBTZWxmLFxuICBUeXBlLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJ1xuXG50eXBlIENyZWF0ZUluamVjdGlvblRva2VuRGVwPFRUb2tlblR5cGU+ID1cbiAgfCBUeXBlPFRUb2tlblR5cGU+XG4gIC8vIE5PVEU6IHdlIGRvbid0IGhhdmUgYW4gQWJzdHJhY3RUeXBlXG4gIHwgKGFic3RyYWN0IG5ldyAoLi4uYXJnczogQXJyYXk8YW55PikgPT4gVFRva2VuVHlwZSlcbiAgfCBJbmplY3Rpb25Ub2tlbjxUVG9rZW5UeXBlPlxuXG50eXBlIENyZWF0ZUluamVjdGlvblRva2VuRGVwczxcbiAgVEZhY3RvcnkgZXh0ZW5kcyAoLi4uYXJnczogQXJyYXk8YW55PikgPT4gYW55LFxuICBURmFjdG9yeURlcHMgZXh0ZW5kcyBQYXJhbWV0ZXJzPFRGYWN0b3J5PiA9IFBhcmFtZXRlcnM8VEZhY3Rvcnk+LFxuPiA9IHtcbiAgW0luZGV4IGluIGtleW9mIFRGYWN0b3J5RGVwc106XG4gICAgfCBDcmVhdGVJbmplY3Rpb25Ub2tlbkRlcDxURmFjdG9yeURlcHNbSW5kZXhdPlxuICAgIHwgW1xuICAgICAgICAuLi5tb2RpZmllcnM6IEFycmF5PE9wdGlvbmFsIHwgU2VsZiB8IFNraXBTZWxmIHwgSG9zdD4sXG4gICAgICAgIHRva2VuOiBDcmVhdGVJbmplY3Rpb25Ub2tlbkRlcDxURmFjdG9yeURlcHNbSW5kZXhdPixcbiAgICAgIF1cbn0gJiB7IGxlbmd0aDogVEZhY3RvcnlEZXBzWydsZW5ndGgnXSB9XG5cbnR5cGUgQ3JlYXRlSW5qZWN0aW9uVG9rZW5PcHRpb25zPFxuICBURmFjdG9yeSBleHRlbmRzICguLi5hcmdzOiBBcnJheTxhbnk+KSA9PiBhbnksXG4gIFRGYWN0b3J5RGVwcyBleHRlbmRzIFBhcmFtZXRlcnM8VEZhY3Rvcnk+ID0gUGFyYW1ldGVyczxURmFjdG9yeT4sXG4+ID1cbiAgLy8gdGhpcyBtZWFucyBURnVuY3Rpb24gaGFzIG5vIHBhcmFtZXRlcnNcbiAgKFRGYWN0b3J5RGVwc1swXSBleHRlbmRzIHVuZGVmaW5lZFxuICAgID8geyBkZXBzPzogbmV2ZXIgfVxuICAgIDogeyBkZXBzOiBDcmVhdGVJbmplY3Rpb25Ub2tlbkRlcHM8VEZhY3RvcnksIFRGYWN0b3J5RGVwcz4gfSkgJiB7XG4gICAgaXNSb290PzogYm9vbGVhblxuICAgIG11bHRpPzogYm9vbGVhblxuICAgIHRva2VuPzogSW5qZWN0aW9uVG9rZW48UmV0dXJuVHlwZTxURmFjdG9yeT4+XG4gICAgZXh0cmFQcm92aWRlcnM/OiBQcm92aWRlciB8IEVudmlyb25tZW50UHJvdmlkZXJzXG4gIH1cblxudHlwZSBDcmVhdGVQcm92aWRlRm5PcHRpb25zPFxuICBURmFjdG9yeSBleHRlbmRzICguLi5hcmdzOiBBcnJheTxhbnk+KSA9PiBhbnksXG4gIFRGYWN0b3J5RGVwcyBleHRlbmRzIFBhcmFtZXRlcnM8VEZhY3Rvcnk+ID0gUGFyYW1ldGVyczxURmFjdG9yeT4sXG4+ID0gUGljazxcbiAgQ3JlYXRlSW5qZWN0aW9uVG9rZW5PcHRpb25zPFRGYWN0b3J5LCBURmFjdG9yeURlcHM+LFxuICAnZGVwcycgfCAnZXh0cmFQcm92aWRlcnMnIHwgJ211bHRpJ1xuPlxuXG50eXBlIEluamVjdEZuPFRGYWN0b3J5UmV0dXJuPiA9IHtcbiAgKCk6IFRGYWN0b3J5UmV0dXJuXG4gIChcbiAgICBpbmplY3RPcHRpb25zOiBJbmplY3RPcHRpb25zICYgeyBvcHRpb25hbD86IGZhbHNlIH0gJiB7XG4gICAgICBpbmplY3Rvcj86IEluamVjdG9yXG4gICAgfSxcbiAgKTogVEZhY3RvcnlSZXR1cm5cbiAgKFxuICAgIGluamVjdE9wdGlvbnM6IEluamVjdE9wdGlvbnMgJiB7IGluamVjdG9yPzogSW5qZWN0b3IgfSxcbiAgKTogVEZhY3RvcnlSZXR1cm4gfCBudWxsXG59XG5cbnR5cGUgUHJvdmlkZUZuPFxuICBUTm9vcCBleHRlbmRzIGJvb2xlYW4sXG4gIFRGYWN0b3J5UmV0dXJuLFxuICBUUmV0dXJuID0gVEZhY3RvcnlSZXR1cm4gZXh0ZW5kcyBBcnJheTxpbmZlciBJdGVtPiA/IEl0ZW0gOiBURmFjdG9yeVJldHVybixcbj4gPSAoVE5vb3AgZXh0ZW5kcyB0cnVlXG4gID8gKHZhbHVlOiBUUmV0dXJuIHwgKCgpID0+IFRSZXR1cm4pKSA9PiBQcm92aWRlclxuICA6ICgpID0+IFByb3ZpZGVyKSAmXG4gIChUUmV0dXJuIGV4dGVuZHMgRnVuY3Rpb25cbiAgICA/ICh2YWx1ZTogVFJldHVybiB8ICgoKSA9PiBUUmV0dXJuKSwgaXNGdW5jdGlvblZhbHVlOiBib29sZWFuKSA9PiBQcm92aWRlclxuICAgIDogKHZhbHVlOiBUUmV0dXJuIHwgKCgpID0+IFRSZXR1cm4pKSA9PiBQcm92aWRlcilcblxudHlwZSBDcmVhdGVJbmplY3Rpb25Ub2tlblJldHVybjxcbiAgVEZhY3RvcnlSZXR1cm4sXG4gIFROb29wIGV4dGVuZHMgYm9vbGVhbiA9IGZhbHNlLFxuPiA9IFtcbiAgSW5qZWN0Rm48VEZhY3RvcnlSZXR1cm4+LFxuICBQcm92aWRlRm48VE5vb3AsIFRGYWN0b3J5UmV0dXJuPixcbiAgSW5qZWN0aW9uVG9rZW48VEZhY3RvcnlSZXR1cm4+LFxuICAoKSA9PiBQcm92aWRlcixcbl1cblxuZnVuY3Rpb24gY3JlYXRlSW5qZWN0Rm48VFZhbHVlPih0b2tlbjogSW5qZWN0aW9uVG9rZW48VFZhbHVlPikge1xuICByZXR1cm4gZnVuY3Rpb24gKFxuICAgIHRoaXM6IEZ1bmN0aW9uLFxuICAgIHtcbiAgICAgIGluamVjdG9yLFxuICAgICAgLi4uaW5qZWN0T3B0aW9uc1xuICAgIH06IEluamVjdE9wdGlvbnMgJiB7IGluamVjdG9yPzogSW5qZWN0b3IgfSA9IHt9LFxuICApIHtcbiAgICBpbmplY3RvciA9IGFzc2VydEluamVjdG9yKHRoaXMsIGluamVjdG9yKVxuICAgIHJldHVybiBydW5JbkluamVjdGlvbkNvbnRleHQoaW5qZWN0b3IsICgpID0+XG4gICAgICBpbmplY3QodG9rZW4sIGluamVjdE9wdGlvbnMgYXMgSW5qZWN0T3B0aW9ucyksXG4gICAgKVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVByb3ZpZGVGbjxcbiAgVFZhbHVlLFxuICBURmFjdG9yeSBleHRlbmRzICguLi5hcmdzOiBBcnJheTxhbnk+KSA9PiBhbnkgPSAoXG4gICAgLi4uYXJnczogQXJyYXk8YW55PlxuICApID0+IFRWYWx1ZSxcbiAgVEZhY3RvcnlEZXBzIGV4dGVuZHMgUGFyYW1ldGVyczxURmFjdG9yeT4gPSBQYXJhbWV0ZXJzPFRGYWN0b3J5Pixcbj4oXG4gIHRva2VuOiBJbmplY3Rpb25Ub2tlbjxUVmFsdWU+LFxuICBmYWN0b3J5OiAoLi4uYXJnczogQXJyYXk8YW55PikgPT4gVFZhbHVlLFxuICBvcHRzOiBDcmVhdGVQcm92aWRlRm5PcHRpb25zPFRGYWN0b3J5LCBURmFjdG9yeURlcHM+ID0ge30sXG4pIHtcbiAgY29uc3QgeyBkZXBzID0gW10sIG11bHRpID0gZmFsc2UsIGV4dHJhUHJvdmlkZXJzID0gW10gfSA9IG9wdHNcbiAgcmV0dXJuICh2YWx1ZT86IFRWYWx1ZSB8ICgoKSA9PiBUVmFsdWUpLCBpc0Z1bmN0aW9uVmFsdWUgPSBmYWxzZSkgPT4ge1xuICAgIGxldCBwcm92aWRlcjogUHJvdmlkZXJcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvd1xuICAgICAgY29uc3QgZmFjdG9yeSA9XG4gICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgID8gaXNGdW5jdGlvblZhbHVlXG4gICAgICAgICAgICA/ICgpID0+IHZhbHVlXG4gICAgICAgICAgICA6IHZhbHVlXG4gICAgICAgICAgOiAoKSA9PiB2YWx1ZVxuXG4gICAgICBwcm92aWRlciA9IHtcbiAgICAgICAgcHJvdmlkZTogdG9rZW4sXG4gICAgICAgIHVzZUZhY3Rvcnk6IGZhY3RvcnksXG4gICAgICAgIG11bHRpLFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwcm92aWRlciA9IHtcbiAgICAgICAgcHJvdmlkZTogdG9rZW4sXG4gICAgICAgIHVzZUZhY3Rvcnk6IGZhY3RvcnksXG4gICAgICAgIGRlcHM6IGRlcHMgYXMgRmFjdG9yeVByb3ZpZGVyWydkZXBzJ10sXG4gICAgICAgIG11bHRpLFxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBbZXh0cmFQcm92aWRlcnMsIHByb3ZpZGVyXVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOb29wSW5qZWN0aW9uVG9rZW48XG4gIFRWYWx1ZSxcbiAgVE11bHRpIGV4dGVuZHMgYm9vbGVhbiA9IGZhbHNlLFxuICBUT3B0aW9ucyA9IFBpY2s8XG4gICAgQ3JlYXRlSW5qZWN0aW9uVG9rZW5PcHRpb25zPCgpID0+IHZvaWQsIFtdPixcbiAgICAnZXh0cmFQcm92aWRlcnMnXG4gID4gJlxuICAgIChUTXVsdGkgZXh0ZW5kcyB0cnVlID8geyBtdWx0aTogdHJ1ZSB9IDogUmVjb3JkPHN0cmluZywgbmV2ZXI+KSxcbj4oZGVzY3JpcHRpb246IHN0cmluZywgb3B0aW9ucz86IFRPcHRpb25zKSB7XG4gIHR5cGUgVFJldHVybiA9IFRNdWx0aSBleHRlbmRzIHRydWUgPyBBcnJheTxUVmFsdWU+IDogVFZhbHVlXG5cbiAgY29uc3QgdG9rZW4gPVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktY29uZGl0aW9uXG4gICAgKG9wdGlvbnMgYXMgQ3JlYXRlSW5qZWN0aW9uVG9rZW5PcHRpb25zPCgpID0+IHZvaWQsIFtdPik/LnRva2VuIHx8XG4gICAgbmV3IEluamVjdGlvblRva2VuPFRSZXR1cm4+KGRlc2NyaXB0aW9uKVxuICByZXR1cm4gW1xuICAgIGNyZWF0ZUluamVjdEZuKHRva2VuKSBhcyBDcmVhdGVJbmplY3Rpb25Ub2tlblJldHVybjxUUmV0dXJuLCB0cnVlPlswXSxcbiAgICBjcmVhdGVQcm92aWRlRm4oXG4gICAgICB0b2tlbixcbiAgICAgICgpID0+IG51bGwhLFxuICAgICAgKG9wdGlvbnMgfHwge30pIGFzIENyZWF0ZVByb3ZpZGVGbk9wdGlvbnM8KCkgPT4gdm9pZCwgW10+LFxuICAgICkgYXMgQ3JlYXRlSW5qZWN0aW9uVG9rZW5SZXR1cm48VFJldHVybiwgdHJ1ZT5bMV0sXG4gICAgdG9rZW4sXG4gICAgKCkgPT4ge30sXG4gIF0gYXMgQ3JlYXRlSW5qZWN0aW9uVG9rZW5SZXR1cm48VFJldHVybiwgdHJ1ZT5cbn1cbiJdfQ==